// Generated by CoffeeScript 2.7.0
  // Section.coffee
import {
  assert,
  croak
} from '@jdeighan/exceptions';

import {
  debug
} from '@jdeighan/exceptions/debug';

import {
  pass,
  undef,
  defined,
  isArray,
  isEmpty,
  isFunction
} from '@jdeighan/coffee-utils';

import {
  toBlock
} from '@jdeighan/coffee-utils/block';

// ---------------------------------------------------------------------------
export var Section = class Section {
  constructor(name, replacer = undef) {
    this.name = name;
    this.replacer = replacer;
    // --- name can be undef or empty
    this.lParts = [];
    if (defined(this.replacer)) {
      assert(isFunction(this.replacer), "bad replacer");
    }
  }

  // ..........................................................
  isEmpty() {
    return this.lParts.length === 0;
  }

  // ..........................................................
  nonEmpty() {
    return this.lParts.length > 0;
  }

  // ..........................................................
  add(data) {
    var i, len, line;
    if (isArray(data)) {
      for (i = 0, len = data.length; i < len; i++) {
        line = data[i];
        this.lParts.push(line);
      }
    } else {
      this.lParts.push(data);
    }
  }

  // ..........................................................
  prepend(data) {
    if (isArray(data)) {
      this.lParts = [...data, ...this.lParts];
    } else {
      this.lParts = [data, ...this.lParts];
    }
  }

  // ..........................................................
  getParts() {
    return this.lParts;
  }

  // ..........................................................
  getBlock() {
    var block;
    debug("enter Section.getBlock()");
    if (this.lParts.length === 0) {
      debug("return undef from Section.getBlock()");
      return undef;
    }
    block = toBlock(this.lParts);
    if (defined(this.replacer)) {
      block = this.replacer(block);
    }
    debug("return from Section.getBlock()", block);
    return block;
  }

};
