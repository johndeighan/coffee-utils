// Generated by CoffeeScript 2.7.0
  // GiftSet.coffee
import {
  produce,
  enableMapSet
} from 'immer';

import {
  assert,
  croak,
  LOG,
  LOGVALUE
} from '@jdeighan/base-utils';

import {
  dbgEnter,
  dbgReturn,
  dbg
} from '@jdeighan/base-utils/debug';

import {
  undef,
  defined,
  notdefined,
  OL,
  isString,
  isNonEmptyString,
  isArray,
  isHash,
  isArrayOfStrings,
  isEmpty,
  nonEmpty
} from '@jdeighan/coffee-utils';

enableMapSet();

// ---------------------------------------------------------------------------
export var LOGMAP = function(label, map) {
  var key, lLines, ref, value, x;
  lLines = [`MAP ${label}:`];
  ref = map.entries();
  for (x of ref) {
    [key, value] = x;
    lLines.push(`   ${OL(key)}: ${OL(value)}`);
  }
  LOG(lLines.join("\n"));
  LOG();
};

// ---------------------------------------------------------------------------
export var addGift = produce(function(draft, giftName, hData = {}) {
  var hValue;
  assert(draft instanceof Map, "draft is not a Map");
  if (draft.get(giftName)) {
    throw new Error(`Gift ${giftName} already exists`);
  }
  hValue = {...hData};
  hValue.name = giftName;
  draft.set(giftName, hValue);
});

// ---------------------------------------------------------------------------
export var reserveGift = produce(function(draft, giftName, user) {
  var gift;
  assert(draft instanceof Map, "draft is not a Map");
  gift = draft.get(giftName);
  assert(gift != null, `No such gift: ${giftName}`);
  gift.reservedBy = user;
});

// ---------------------------------------------------------------------------
export var cancelReservation = produce(function(draft, giftName) {
  var gift;
  assert(draft instanceof Map, "draft is not a Map");
  gift = draft.get(giftName);
  assert(defined(gift), `No such gift: ${giftName}`);
  delete gift.reservedBy;
});

// ---------------------------------------------------------------------------
