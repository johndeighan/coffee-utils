// Generated by CoffeeScript 2.7.0
// block.coffee
import fs from 'fs';

import readline from 'readline';

import {
  assert,
  croak
} from '@jdeighan/base-utils/exceptions';

import {
  undef,
  pass,
  defined,
  notdefined,
  rtrim,
  OL,
  isEmpty,
  isString,
  isArray,
  nonEmpty,
  toArray,
  toBlock
} from '@jdeighan/base-utils';

import {
  isArrayOfStrings
} from '@jdeighan/coffee-utils';

// ---------------------------------------------------------------------------
export var splitBlock = function(block) {
  var pos;
  assert(isString(block), "not a string");
  pos = block.indexOf('\n');
  if (pos === -1) {
    return [block, undef];
  } else {
    return [block.substring(0, pos), block.substring(pos + 1)];
  }
};

// ---------------------------------------------------------------------------
export var firstLine = function(block) {
  var pos;
  assert(isString(block), "not a string");
  pos = block.indexOf('\n');
  if (pos === -1) {
    return block;
  } else {
    return block.substring(0, pos);
  }
};

// ---------------------------------------------------------------------------
export var remainingLines = function(block) {
  var pos;
  assert(isString(block), "not a string");
  pos = block.indexOf('\n');
  if (pos === -1) {
    return undef;
  } else {
    return block.substring(pos + 1);
  }
};

// ---------------------------------------------------------------------------
//   normalizeBlock - remove blank lines, trim each line
//                  - collapse internal whitespace to ' '
export var normalizeBlock = function(content) {
  var lLines, line;
  if (typeof content !== 'string') {
    throw new Error("normalizeBlock(): not a string");
  }
  lLines = (function() {
    var i, len, ref, results;
    ref = toArray(content);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      line = ref[i];
      line = line.trim();
      results.push(line.replace(/\s+/g, ' '));
    }
    return results;
  })();
  lLines = lLines.filter(function(line) {
    return line !== '';
  });
  return lLines.join('\n');
};

// ---------------------------------------------------------------------------
// truncateBlock - limit block to a certain number of lines
export var truncateBlock = function(str, numLines) {
  var lLines;
  lLines = toArray(str);
  lLines.length = numLines;
  return toBlock(lLines);
};

// ---------------------------------------------------------------------------
export var joinBlocks = function(...lBlocks) {
  var block, i, lNonEmptyBlocks, len, ref;
  lNonEmptyBlocks = [];
  ref = lBlocks.flat(999);
  for (i = 0, len = ref.length; i < len; i++) {
    block = ref[i];
    assert(isString(block), `joinBlocks(): ${block} is not a string`);
    if (nonEmpty(block)) {
      lNonEmptyBlocks.push(block);
    }
  }
  return lNonEmptyBlocks.join('\n');
};
