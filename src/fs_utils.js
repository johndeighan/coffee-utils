// Generated by CoffeeScript 2.5.1
// fs_utils.coffee
import fs from 'fs';

import assert from 'assert';

import {
  say,
  taml,
  undef,
  error,
  unitTesting
} from './coffee_utils.js';

// ---------------------------------------------------------------------------
//   backup - back up a file

// --- If report is true, missing source files are not an error
//     but both missing source files and successful copies
//     are reported via console.log
export var backup = function(file, from, to, report = false) {
  var dest, src;
  src = `${from}/${file}`;
  dest = `${to}/${file}`;
  if (report) {
    if (fs.existsSync(src)) {
      console.log(`OK ${file}`);
      return fs.copyFileSync(src, dest);
    } else {
      return console.log(`MISSING ${src}`);
    }
  } else {
    return fs.copyFileSync(src, dest);
  }
};

// ---------------------------------------------------------------------------
//   slurp - read an entire file into a string
export var slurp = function(filepath) {
  return fs.readFileSync(filepath, 'utf8').toString();
};

// ---------------------------------------------------------------------------
//   slurpTAML - read TAML from a file
export var slurpTAML = function(filepath) {
  var contents;
  contents = slurp(filepath);
  return taml(contents);
};

// ---------------------------------------------------------------------------
//   barf - write a string to a file
export var barf = function(filepath, contents) {
  return fs.writeFileSync(filepath, contents, {
    encoding: 'utf8'
  });
};

// --- Capable of removing leading whitespace which is found on
//     the first line from all lines,
//     Can handle an array of strings or a multi-line string

// ---------------------------------------------------------------------------
//   withExt - change file extention in a file name
export var withExt = function(filename, newExt) {
  var _, ext, lMatches, pre;
  assert(newExt, "withExt(): No newExt provided");
  if (newExt.indexOf('.') !== 0) {
    newExt = '.' + newExt;
  }
  if (lMatches = filename.match(/^(.*)\.([^.]+)$/)) {
    [_, pre, ext] = lMatches;
    return `${pre}${newExt}`;
  } else {
    return error(`withExt(): Invalid file name: '${filename}'`);
  }
};
