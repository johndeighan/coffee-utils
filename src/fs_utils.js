// Generated by CoffeeScript 2.5.1
// fs_utils.coffee
var __dirname;

import assert from 'assert';

import {
  dirname
} from 'path';

import {
  fileURLToPath
} from 'url';

import {
  existsSync,
  copyFileSync,
  readFileSync,
  writeFileSync,
  readdirSync
} from 'fs';

import {
  say,
  taml,
  undef,
  rtrim,
  error,
  unitTesting
} from '@jdeighan/coffee-utils';

__dirname = dirname(fileURLToPath(import.meta.url));

export var backup = function(file, from, to, report = false) {
  var dest, src;
  src = `${from}/${file}`;
  dest = `${to}/${file}`;
  if (report) {
    if (existsSync(src)) {
      console.log(`OK ${file}`);
      return copyFileSync(src, dest);
    } else {
      return console.log(`MISSING ${src}`);
    }
  } else {
    return copyFileSync(src, dest);
  }
};

// ---------------------------------------------------------------------------
//   slurp - read an entire file into a string
export var slurp = function(filepath) {
  return readFileSync(filepath, 'utf8').toString();
};

// ---------------------------------------------------------------------------
//   slurpTAML - read TAML from a file
export var slurpTAML = function(filepath) {
  var contents;
  contents = slurp(filepath);
  return taml(contents);
};

// ---------------------------------------------------------------------------
//   barf - write a string to a file
export var barf = function(filepath, contents) {
  contents = rtrim(contents) + '\n';
  return writeFileSync(filepath, contents, {
    encoding: 'utf8'
  });
};

// --- Capable of removing leading whitespace which is found on
//     the first line from all lines,
//     Can handle an array of strings or a multi-line string

// ---------------------------------------------------------------------------
//   withExt - change file extention in a file name
export var withExt = function(filename, newExt) {
  var _, ext, lMatches, pre;
  assert(newExt, "withExt(): No newExt provided");
  if (newExt.indexOf('.') !== 0) {
    newExt = '.' + newExt;
  }
  if (lMatches = filename.match(/^(.*)\.([^.]+)$/)) {
    [_, pre, ext] = lMatches;
    return `${pre}${newExt}`;
  } else {
    return error(`withExt(): Invalid file name: '${filename}'`);
  }
};

// ---------------------------------------------------------------------------
//    Get all subdirectories of a directory
export var getSubDirs = function(dir) {
  return readdirSync(dir, {
    withFileTypes: true
  }).filter((d) => {
    return d.isDirectory();
  }).map((d) => {
    return d.name;
  }).sort();
};

// ---------------------------------------------------------------------------
//    Later, search subdirectories
export var pathTo = function(fname, dir) {
  var fpath, i, len, ref, subdir;
  assert(existsSync(dir), `Directory ${dir} does not exist`);
  if (existsSync(`${dir}/${fname}`)) {
    return `${dir}/${fname}`;
  } else {
    ref = getSubDirs(dir);
    // --- Search all directories in this directory
    for (i = 0, len = ref.length; i < len; i++) {
      subdir = ref[i];
      if (fpath = pathTo(fname, `${dir}/${subdir}`)) {
        return fpath;
      }
    }
  }
  return undef;
};
