{
  "version": 3,
  "file": "KeyedSet.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\KeyedSet.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# KeyedSet.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, OL, deepCopy,\r\n\tisString, isNonEmptyString, isArray, isHash,\r\n\tisEmpty, nonEmpty, isArrayOfStrings,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\r\nimport {\r\n\tdbgEnter, dbgReturn, dbg,\r\n\t} from '@jdeighan/base-utils/debug'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class KeyedSet extends Map\r\n\r\n\tconstructor: (@setName, lKeyNames, @sep='|') ->\r\n\t\t# --- lKeyNames can be:\r\n\t\t#        1. a non-empty string\r\n\t\t#        2. an array of non-empty strings\r\n\r\n\t\tdbgEnter 'KeyedSet'\r\n\t\tsuper()\r\n\t\tassert isNonEmptyString(@setName), \"bad set name: #{OL(@setName)}\"\r\n\t\tif isString(lKeyNames)\r\n\t\t\tassert nonEmpty(lKeyNames), \"empty string key name\"\r\n\t\t\t@lKeyNames = [lKeyNames]\r\n\t\t\t@numKeys = 1\r\n\t\telse if isArray(lKeyNames)\r\n\t\t\tassert nonEmpty(lKeyNames), \"empty key name array\"\r\n\t\t\tfor name in lKeyNames\r\n\t\t\t\tassert isNonEmptyString(name),\r\n\t\t\t\t\t\t\"name not a non-empty string: #{OL(name)}\"\r\n\t\t\t@numKeys = lKeyNames.length\r\n\t\t\t@lKeyNames = lKeyNames\r\n\t\telse\r\n\t\t\tcroak \"Invalid key names: #{OL(lKeyNames)}\"\r\n\t\tdbg \"key is #{OL(@lKeyNames)}\"\r\n\t\tdbgReturn 'KeyedSet'\r\n\r\n\t# ..........................................................\r\n\r\n\tadd: (keyVal, hData={}) ->\r\n\r\n\t\tdbgEnter 'add', keyVal, hData\r\n\t\tassert ! @has(keyVal), \"adding duplicate key #{OL(keyVal)}\"\r\n\t\tassert isHash(hData), \"hData not a hash: #{OL(hData)}\"\r\n\t\tdbg \"not a duplicate\"\r\n\r\n\t\thItem = deepCopy hData\r\n\r\n\t\t# --- Add key values to hItem\r\n\t\tlKeyVals = @getKeyValues keyVal\r\n\t\tfor name,i in @lKeyNames\r\n\t\t\tassert notdefined(hItem[name]),\r\n\t\t\t\t\t\"hData has key #{name}\"\r\n\t\t\thItem[name] = lKeyVals[i]\r\n\r\n\t\tkey = @getKey(keyVal)\r\n\t\tdbg 'key', key\r\n\t\tdbg 'value', hItem\r\n\t\t@set key, hItem    # set() is a method in Map, the base class\r\n\t\t@length = @size    # add to all methods that change size\r\n\t\tdbgReturn 'add'\r\n\t\treturn this   # allow chaining\r\n\r\n\t# ..........................................................\r\n\r\n\tgetKey: (keyVal) ->\r\n\t\t# --- Get the actual key used in the underlying Map object\r\n\r\n\t\tdbgEnter 'getKey'\r\n\t\tkey = @getKeyValues(keyVal).join(@sep)\r\n\t\tdbgReturn 'getKey', key\r\n\t\treturn key\r\n\r\n\t# ..........................................................\r\n\r\n\tgetKeyValues: (keyVal) ->\r\n\t\t# --- Accepts either a string or an array of strings\r\n\t\t#     But all keys must be non-empty strings\r\n\t\t#     Always returns an array\r\n\r\n\t\tdbgEnter 'getKeyValues', keyVal\r\n\t\tif isString(keyVal)\r\n\t\t\tlKeyVals = [keyVal]\r\n\t\telse if isArray(keyVal)\r\n\t\t\tlKeyVals = keyVal\r\n\t\telse\r\n\t\t\tcroak \"Bad key value: #{OL(keyVal)}\"\r\n\t\tassert (lKeyVals.length == @numKeys), \"Bad # keys in #{OL(keyVal)}\"\r\n\t\tfor val in lKeyVals\r\n\t\t\tassert isNonEmptyString(val), \"Bad key val: #{OL(val)}\"\r\n\t\tdbgReturn 'getKeyValues', lKeyVals\r\n\t\treturn lKeyVals\r\n\r\n\t# ..........................................................\r\n\r\n\thas: (keyVal) ->\r\n\r\n\t\treturn super @getKey(keyVal)\r\n\r\n\t# ..........................................................\r\n\r\n\tupdate: (keyVal, hData={}) ->\r\n\r\n\t\tdbgEnter 'update', keyVal, hData\r\n\t\tkey = @getKey(keyVal)\r\n\t\tdbg \"key = #{OL(key)}\"\r\n\t\thItem = @get(key)\r\n\t\tdbg 'hItem', hItem\r\n\t\tassert defined(hItem), \"updating missing key #{OL(keyVal)}\"\r\n\t\tfor key,val of hData\r\n\t\t\thItem[key] = val\r\n\t\tdbgReturn 'update'\r\n\t\treturn this   # allow chaining\r\n\r\n\t# ..........................................................\r\n\r\n\tremove: (keyVal) ->\r\n\r\n\t\tkey = @getKey(keyVal)\r\n\t\tif ! @delete key\r\n\t\t\tcroak \"No key #{OL(keyVal)} in #{@setName}\"\r\n\t\t@length = @size    # add to all methods that change size\r\n\t\treturn this   # allow chaining\r\n\r\n\t# ..........................................................\r\n\r\n\tgetAllItems: () ->\r\n\t\t# --- Useful for unit tests, but it's usually better\r\n\t\t#     to use a generator like .entries()\r\n\r\n\t\treturn Array.from(@values())\r\n\r\n\t# ..........................................................\r\n\r\n\tget: (keyVal) ->\r\n\t\t# --- Override to require that it exists\r\n\r\n\t\titem = super @getKey(keyVal)\r\n\t\tassert defined(item), \"No such item: #{OL(keyVal)} in #{@setName}\"\r\n\t\treturn item\r\n\r\n\t# ..........................................................\r\n\r\n\tdump: () ->\r\n\r\n\t\tconsole.log \"DUMP #{@setName}:\"\r\n\t\tfor [key, value] from @entries()\r\n\t\t\tconsole.log \"#{OL(key)}: #{OL(value)}\"\r\n\r\n# ---------------------------------------------------------------------------\r\n"
  ]
}