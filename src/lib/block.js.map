{
  "version": 3,
  "file": "block.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\block.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# block.coffee\r\n\r\nimport fs from 'fs'\r\nimport readline from 'readline'\r\n\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {dbgEnter, dbgReturn, dbg} from '@jdeighan/base-utils/debug'\r\nimport {\r\n\tundef, pass, defined, notdefined, rtrim, OL, isArrayOfStrings,\r\n\tisEmpty, isString, isArray, nonEmpty, toArray, toBlock,\r\n\t} from '@jdeighan/base-utils'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport splitBlock = (block) =>\r\n\r\n\tassert isString(block), \"not a string\"\r\n\tpos = block.indexOf('\\n')\r\n\tif (pos == -1)\r\n\t\treturn [block, undef]\r\n\telse\r\n\t\treturn [block.substring(0, pos), block.substring(pos+1)]\r\n\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport firstLine = (block) =>\r\n\r\n\tdbgEnter 'firstLine', block\r\n\tassert isString(block), \"not a string\"\r\n\tpos = block.indexOf('\\n')\r\n\tif (pos >= 0)\r\n\t\tblock = block.substring(0, pos)\r\n\tdbgReturn 'firstLine', block\r\n\treturn block\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport remainingLines = (block) =>\r\n\r\n\tassert isString(block), \"not a string\"\r\n\tpos = block.indexOf('\\n')\r\n\tif (pos == -1)\r\n\t\treturn undef\r\n\telse\r\n\t\treturn block.substring(pos+1)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   normalizeBlock - remove blank lines, trim each line\r\n#                  - collapse internal whitespace to ' '\r\n\r\nexport normalizeBlock = (content) =>\r\n\r\n\tif typeof content != 'string'\r\n\t\tthrow new Error(\"normalizeBlock(): not a string\")\r\n\tlLines = for line in toArray(content)\r\n\t\tline = line.trim()\r\n\t\tline.replace(/\\s+/g, ' ')\r\n\tlLines = lLines.filter (line) -> line != ''\r\n\treturn lLines.join('\\n')\r\n\r\n# ---------------------------------------------------------------------------\r\n# truncateBlock - limit block to a certain number of lines\r\n\r\nexport truncateBlock = (str, numLines) =>\r\n\r\n\tlLines = toArray str\r\n\tlLines.length = numLines\r\n\treturn toBlock lLines\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport joinBlocks = (lBlocks...) =>\r\n\r\n\tlNonEmptyBlocks = []\r\n\tfor block in lBlocks.flat(999)\r\n\t\tassert isString(block), \"joinBlocks(): #{block} is not a string\"\r\n\t\tif nonEmpty(block)\r\n\t\t\tlNonEmptyBlocks.push block\r\n\treturn lNonEmptyBlocks.join('\\n')\r\n"
  ]
}