// Generated by CoffeeScript 2.6.1
// call_stack.coffee
var doDebugStack;

import {
  undef,
  croak,
  assert
} from '@jdeighan/coffee-utils';

import {
  log,
  LOG
} from '@jdeighan/coffee-utils/log';

doDebugStack = false;

// ---------------------------------------------------------------------------
export var debugStack = function(flag = true) {
  doDebugStack = flag;
};

// ---------------------------------------------------------------------------
export var CallStack = class CallStack {
  constructor() {
    this.reset();
  }

  // ........................................................................
  call(funcName, hInfo) {
    if (doDebugStack) {
      LOG(`[CALL ${funcName}]`);
    }
    this.lStack.push({funcName, hInfo});
  }

  // ........................................................................
  returnFrom(funcName) {
    var TOSfName, hInfo;
    if (doDebugStack) {
      LOG(`[RETURN FROM ${funcName}]`);
    }
    if (this.lStack.length === 0) {
      LOG(`returnFrom('${funcName}') but stack is empty`);
      return undef;
    }
    TOSfName = this.lStack[this.lStack.length - 1].funcName;
    if (funcName === TOSfName) {
      ({funcName, hInfo} = this.lStack.pop());
      assert(funcName === TOSfName, "Bad func name on stack");
      return hInfo;
    } else {
      this.dump();
      LOG(`returnFrom('${funcName}') but TOS is '${TOSfName}'`);
      return undef;
    }
  }

  // ........................................................................
  reset() {
    if (doDebugStack) {
      LOG("RESET STACK");
    }
    return this.lStack = [];
  }

  // ........................................................................
  dump(label = 'CALL STACK') {
    var i, item, j, len, ref;
    console.log(`${label}:`);
    ref = this.lStack;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      item = ref[i];
      LOG(`${i}: ${JSON.stringify(item)}`);
    }
  }

};
