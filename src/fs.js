// Generated by CoffeeScript 2.7.0
// fs.coffee
var isSystemDir;

import pathlib from 'path';

import urllib from 'url';

import fs from 'fs';

import NReadLines from 'n-readlines';

import {
  assert,
  croak,
  LOG,
  fromTAML
} from '@jdeighan/exceptions';

import {
  undef,
  pass,
  defined,
  rtrim,
  isEmpty,
  nonEmpty,
  getOptions,
  isString,
  isArray,
  isHash,
  isRegExp,
  isFunction,
  OL
} from '@jdeighan/coffee-utils';

import {
  arrayToBlock
} from '@jdeighan/coffee-utils/block';

// ---------------------------------------------------------------------------
//    mydir() - pass argument import.meta.url and it will return
//              the directory your file is in
export var mydir = function(url) {
  var dir, final, path;
  path = urllib.fileURLToPath(url);
  dir = pathlib.dirname(path);
  final = mkpath(dir);
  return final;
};

// ---------------------------------------------------------------------------
export var projRoot = function(url) {
  var dir, rootDir;
  dir = mydir(url);
  rootDir = pathTo('package.json', dir, 'direction=up directory');
  assert(defined(rootDir), "No project root directory found");
  return rootDir;
};

// ---------------------------------------------------------------------------
//    myfile() - pass argument import.meta.url and it will return
//               the name of your file
export var myfile = function(url) {
  var filename, path;
  path = urllib.fileURLToPath(url);
  filename = pathlib.parse(path).base;
  return filename;
};

// ---------------------------------------------------------------------------
//    myfullpath() - pass argument import.meta.url and it will return
//                   the full path to your file
export var myfullpath = function(url) {
  var path;
  path = urllib.fileURLToPath(url);
  return mkpath(path);
};

// ---------------------------------------------------------------------------
export var getStats = function(fullpath) {
  return fs.lstatSync(fullpath);
};

// ---------------------------------------------------------------------------
export var isFile = function(fullpath) {
  try {
    return getStats(fullpath).isFile();
  } catch (error) {
    return false;
  }
};

// ---------------------------------------------------------------------------
export var isDir = function(fullpath) {
  try {
    return getStats(fullpath).isDirectory();
  } catch (error) {
    return false;
  }
};

// ---------------------------------------------------------------------------
export var isSimpleFileName = function(path) {
  var h;
  h = pathlib.parse(path);
  return !h.root && !h.dir && h.base;
};

// ---------------------------------------------------------------------------
export var fileStub = function(path) {
  var lMatches;
  assert(isString(path), "fileExt(): path not a string");
  if (lMatches = path.match(/^(.*)\.[A-Za-z0-9_]+$/)) {
    return lMatches[1];
  } else {
    return '';
  }
};

// ---------------------------------------------------------------------------
export var fileExt = function(path) {
  var lMatches;
  assert(isString(path), "fileExt(): path not a string");
  if (lMatches = path.match(/\.[A-Za-z0-9_]+$/)) {
    return lMatches[0];
  } else {
    return '';
  }
};

// ---------------------------------------------------------------------------
export var mkpath = function(...lParts) {
  var _, drive, i, lMatches, lNewParts, len, newPath, part, rest;
  // --- Ignore empty parts
  lNewParts = [];
  for (i = 0, len = lParts.length; i < len; i++) {
    part = lParts[i];
    if (nonEmpty(part)) {
      lNewParts.push(part);
    }
  }
  newPath = lNewParts.join('/').replace(/\\/g, '/');
  if (lMatches = newPath.match(/^([A-Z])\:(.*)$/)) {
    [_, drive, rest] = lMatches;
    return `${drive.toLowerCase()}:${rest}`;
  } else {
    return newPath;
  }
};

// ---------------------------------------------------------------------------
export var getFullPath = function(filepath) {
  return mkpath(pathlib.resolve(filepath));
};

// ---------------------------------------------------------------------------
export var forEachLineInFile = function(filepath, func) {
  var buffer, line, nLines, reader;
  reader = new NReadLines(filepath);
  nLines = 0;
  while ((buffer = reader.next())) {
    nLines += 1;
    // --- text is split on \n chars, we also need to remove \r chars
    line = buffer.toString().replace(/\r/g, '');
    if (func(line, nLines) === 'EOF') {
      reader.close(); // allow premature termination
    }
  }
};

// ---------------------------------------------------------------------------
//   slurp - read an entire file into a string
export var slurp = function(filepath, maxLines = undef) {
  var contents, lLines;
  if (maxLines != null) {
    lLines = [];
    forEachLineInFile(filepath, function(line, nLines) {
      lLines.push(line);
      if (nLines >= maxLines) {
        return 'EOF';
      } else {
        return undef;
      }
    });
    contents = lLines.join("\n");
  } else {
    filepath = filepath.replace(/\//g, "\\");
    contents = fs.readFileSync(filepath, 'utf8').toString();
  }
  return contents;
};

// ---------------------------------------------------------------------------
//   barf - write a string to a file
export var barf = function(filepath, contents) {
  if (isEmpty(contents)) {
    return;
  }
  if (isArray(contents)) {
    contents = arrayToBlock(contents);
  } else if (!isString(contents)) {
    croak("barf(): Invalid contents");
  }
  contents = rtrim(contents) + "\n";
  fs.writeFileSync(filepath, contents, {
    encoding: 'utf8'
  });
};

// ---------------------------------------------------------------------------
//   withExt - change file extention in a file name
export var withExt = function(path, newExt, hOptions = {}) {
  var dir, ext, name;
  // --- Valid options:
  //        removeLeadingUnderScore - boolean
  assert(newExt, "withExt(): No newExt provided");
  if (newExt.indexOf('.') !== 0) {
    newExt = '.' + newExt;
  }
  ({dir, name, ext} = pathlib.parse(path));
  if (hOptions.removeLeadingUnderScore && (name.indexOf('_') === 0)) {
    name = name.substr(1);
  }
  return mkpath(dir, `${name}${newExt}`);
};

// ---------------------------------------------------------------------------
//   removeFileWithExt - remove file with different ext
export var removeFileWithExt = function(path, newExt, hOptions = {}) {
  var err, fullpath, success;
  // --- Valid options:
  //        doLog
  //        removeLeadingUnderScore
  fullpath = withExt(path, newExt, hOptions);
  try {
    fs.unlinkSync(fullpath);
    if (hOptions.doLog) {
      LOG(`   unlink ${filename}`);
    }
    success = true;
  } catch (error) {
    err = error;
    LOG(`   UNLINK FAILED: ${err.message}`);
    success = false;
  }
  return success;
};

// ---------------------------------------------------------------------------
//   withUnderScore - add '_' to file name
export var withUnderScore = function(path) {
  var base, dir;
  ({dir, base} = pathlib.parse(path));
  return mkpath(dir, `_${base}`);
};

// ---------------------------------------------------------------------------
isSystemDir = function(dir) {
  return dir === '$Recycle.Bin' || dir === '$WinREAgent';
};

// ---------------------------------------------------------------------------
//    Get all subdirectories of a directory
export var getSubDirs = function(dir) {
  return fs.readdirSync(dir, {
    withFileTypes: true
  }).filter(function(d) {
    return d.isDirectory() && !isSystemDir(d.name);
  }).map(function(d) {
    return mkpath(d.name);
  }).sort();
};

// ---------------------------------------------------------------------------
//    Get path to parent directory of a directory
export var getParentDir = function(dir) {
  var hParts;
  hParts = pathlib.parse(dir);
  if (hParts.dir === hParts.root) {
    return undef;
  }
  return mkpath(pathlib.resolve(dir, '..'));
};

// ---------------------------------------------------------------------------
export var forEachFile = function(dir, cb, filt = undef, level = 0) {
  var ent, i, j, lSubDirectories, len, len1, ref, ref1, subdir;
  // --- filt can be a regular expression or a function that gets:
  //        (filename, dir, level)
  //     callback will get parms (filename, dir, level)
  lSubDirectories = [];
  ref = fs.readdirSync(dir, {
    withFileTypes: true
  });
  for (i = 0, len = ref.length; i < len; i++) {
    ent = ref[i];
    if (ent.isDirectory()) {
      lSubDirectories.push(ent);
    } else if (ent.isFile()) {
      if (filt == null) {
        cb(ent.name, dir, level);
      } else if (isRegExp(filt)) {
        if (ent.name.match(filt)) {
          cb(ent.name, dir, level);
        } else if (isFunction(filt)) {
          if (filt(ent.name, dir, level)) {
            cb(ent.name, dir, level);
          }
        }
      } else {
        croak("forEachFile(): bad filter", 'filter', filt);
      }
    }
  }
  if (nonEmpty(lSubDirectories)) {
    ref1 = lSubDirectories.sort();
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      subdir = ref1[j];
      forEachFile(mkpath(dir, subdir.name), cb, filt, level + 1);
    }
  }
};

// ---------------------------------------------------------------------------
export var pathTo = function(fname, searchDir, options = undef) {
  var dirPath, direction, directory, filepath, fpath, i, len, nLevels, ref, relative, subdir;
  ({direction, relative, directory} = getOptions(options, {
    direction: 'down',
    relative: false,
    directory: false // return only the directory the file is in
  }));
  assert(!(relative && directory), "relative & directory are incompatible");
  if (!searchDir) {
    searchDir = process.cwd();
  }
  assert(isDir(searchDir), `Not a directory: ${OL(searchDir)}`);
  filepath = mkpath(searchDir, fname);
  if (isFile(filepath)) {
    if (relative) {
      return `./${fname}`;
    } else if (directory) {
      return searchDir;
    } else {
      return filepath;
    }
  }
  if (direction === 'down') {
    ref = getSubDirs(searchDir);
    // --- Search all directories in this directory
    //     getSubDirs() returns dirs sorted alphabetically
    for (i = 0, len = ref.length; i < len; i++) {
      subdir = ref[i];
      dirPath = mkpath(searchDir, subdir);
      if (defined(fpath = pathTo(fname, dirPath, options))) {
        if (relative) {
          return fpath.replace('./', `./${subdir}/`);
        } else if (directory) {
          return dirPath;
        } else {
          return fpath;
        }
      }
    }
  } else if (direction === 'up') {
    nLevels = 0;
    while (defined(dirPath = getParentDir(searchDir))) {
      nLevels += 1;
      fpath = mkpath(dirPath, fname);
      if (isFile(fpath)) {
        if (relative) {
          return "../".repeat(nLevels) + fname;
        } else if (directory) {
          return dirPath;
        } else {
          return fpath;
        }
      }
      searchDir = dirPath;
    }
  } else {
    croak(`pathTo(): Invalid direction '${direction}'`);
  }
  return undef;
};

// ---------------------------------------------------------------------------
export var allPathsTo = function(fname, searchDir) {
  var h, lPaths, path;
  if (!searchDir) {
    searchDir = process.cwd();
  }
  path = pathTo(fname, searchDir, {
    direction: "up"
  });
  if (path != null) {
    lPaths = [path]; // --- build an array of paths
    // --- search upward for files, but return ordered top down
    while ((h = pathlib.parse(path)) && (path = pathTo(fname, pathlib.resolve(h.dir, '..'), {
        direction: "up"
      }))) {
      lPaths.unshift(path);
    }
    return lPaths;
  } else {
    return [];
  }
};

// ---------------------------------------------------------------------------
export var newerDestFileExists = function(srcPath, destPath) {
  var destModTime, srcModTime;
  if (!fs.existsSync(destPath)) {
    return false;
  }
  srcModTime = fs.statSync(srcPath).mtimeMs;
  destModTime = fs.statSync(destPath).mtimeMs;
  if (destModTime >= srcModTime) {
    return true;
  } else {
    return false;
  }
};

// ---------------------------------------------------------------------------
export var shortenPath = function(path) {
  var _, lMatches, str, tail;
  // --- Replace user's home dir with '~'
  str = mkpath(path);
  if (lMatches = str.match(/^[A-Za-z]:\/Users\/[a-z_][a-z0-9_]*\/(.*)$/i)) {
    [_, tail] = lMatches;
    return `~/${tail}`;
  } else {
    return str;
  }
};

// ---------------------------------------------------------------------------
export var parseSource = function(source) {
  var dir, hInfo, hSourceInfo, lMatches;
  // --- returns {
  //        dir
  //        filename
  //        fullpath
  //        stub
  //        ext
  //        purpose
  //        }
  // --- NOTE: source may be a file URL, e.g. import.meta.url
  assert(isString(source), `parseSource(): source not a string: ${OL(source)}`);
  if (source === 'unit test') {
    croak("A source of 'unit test' is deprecated");
  }
  if (source.match(/^file\:\/\//)) {
    source = urllib.fileURLToPath(source);
  }
  if (isDir(source)) {
    hSourceInfo = {
      dir: source,
      fullpath: source
    };
  } else {
    hInfo = pathlib.parse(source);
    if (hInfo.dir) {
      dir = mkpath(hInfo.dir); // change \ to /
      hSourceInfo = {
        dir,
        fullpath: mkpath(dir, hInfo.base),
        filename: hInfo.base,
        stub: hInfo.name,
        ext: hInfo.ext
      };
    } else {
      hSourceInfo = {
        filename: hInfo.base,
        stub: hInfo.name,
        ext: hInfo.ext
      };
    }
    // --- check for a 'purpose'
    if (lMatches = hSourceInfo.stub.match(/\.([A-Za-z_]+)$/)) {
      hSourceInfo.purpose = lMatches[1];
    }
  }
  return hSourceInfo;
};

// ---------------------------------------------------------------------------
//   backup - back up a file

// --- If report is true, missing source files are not an error
//     but both missing source files and successful copies
//     are reported via LOG
export var backup = function(file, from, to, report = false) {
  var dest, src;
  src = mkpath(from, file);
  dest = mkpath(to, file);
  if (report) {
    if (fs.existsSync(src)) {
      LOG(`OK ${file}`);
      return fs.copyFileSync(src, dest);
    } else {
      return LOG(`MISSING ${src}`);
    }
  } else {
    return fs.copyFileSync(src, dest);
  }
};

// ---------------------------------------------------------------------------
//   slurpTAML - read TAML from a file
export var slurpTAML = function(filepath) {
  var contents;
  contents = slurp(filepath);
  return fromTAML(contents);
};
