enter brewCielo()
│   in constructor: BUFFER:
│      ---
│      - if (x==42)
│      - "\t#include code.txt"
│   enter StringInput.getAll()
│   │   enter StringInput.get() - src unit test
│   │   │   enter fetch()
│   │   │   └─> return 'if (x==42)' from fetch()
│   │   │   LINE = 'if (x==42)'
│   │   │   enter SmartInput.mapLine('if (x==42)', 0)
│   │   │   │   check for continuation lines
│   │   │   │   enter fetch()
│   │   │   │   │   #include code.txt with prefix '\t'
│   │   │   │   │   enter getFileContents('code.txt')
│   │   │   │   │   │   envvar = 'dir_data'
│   │   │   │   │   │   dir = 'C:/Users/johnd/string-input/test/data'
│   │   │   │   │   │   enter pathTo('code.txt','C:/Users/johnd/string-input/test/data','down')
│   │   │   │   │   │   └─> return from pathTo: C:/Users/johnd/string-input/test/data/code.txt - file exists
│   │   │   │   │   │   fullpath = 'C:/Users/johnd/string-input/test/data/code.txt'
│   │   │   │   │   │   enter slurp('C:/Users/johnd/string-input/test/data/code.txt')
│   │   │   │   │   │   └─> return from slurp():
│   │   │   │   │   │          y = 5
│   │   │   │   │   │          if (y > 100)
│   │   │   │   │   │          \tconsole.log "y is big"
│   │   │   │   │   └─> return from getFileContents() - not converting
│   │   │   │   │   in constructor: BUFFER:
│   │   │   │   │      ---
│   │   │   │   │      - y = 5
│   │   │   │   │      - if (y > 100)
│   │   │   │   │      - "\tconsole.log \"y is big\""
│   │   │   │   │   alt input created with prefix '\t'
│   │   │   │   │   enter fetch()
│   │   │   │   │   └─> return 'y = 5' from fetch()
│   │   │   │   │   enter unfetch('\ty = 5')
│   │   │   │   │   └─> return from unfetch()
│   │   │   │   │   no continuation lines found
│   │   │   │   │   check for HEREDOC
│   │   │   │   │   mapping string
│   │   │   │   └─> return 'if (x==42)' from SmartInput.mapLine()
│   │   │   │   MAP: 'if (x==42)' => 'if (x==42)'
│   │   │   └─> return 'if (x==42)', 0 from StringInput.get()
│   │   │   enter StringInput.get() - src unit test
│   │   │   │   enter fetch()
│   │   │   │   │   enter fetch()
│   │   │   │   │   └─> return 'if (y > 100)' from fetch()
│   │   │   │   └─> return '\tif (y > 100)' from fetch() - alt
│   │   │   │   LINE = '\tif (y > 100)'
│   │   │   │   enter SmartInput.mapLine('if (y > 100)', 1)
│   │   │   │   │   check for continuation lines
│   │   │   │   │   enter fetch()
│   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   └─> return '\tconsole.log "y is big"' from fetch()
│   │   │   │   │   └─> return '\t\tconsole.log "y is big"' from fetch() - alt
│   │   │   │   │   enter unfetch('\t\tconsole.log "y is big"')
│   │   │   │   │   └─> return from unfetch()
│   │   │   │   │   no continuation lines found
│   │   │   │   │   check for HEREDOC
│   │   │   │   │   mapping string
│   │   │   │   └─> return 'if (y > 100)' from SmartInput.mapLine()
│   │   │   │   MAP: 'if (y > 100)' => 'if (y > 100)'
│   │   │   └─> return 'if (y > 100)', 1 from StringInput.get()
│   │   │   enter StringInput.get() - src unit test
│   │   │   │   enter fetch()
│   │   │   │   │   enter fetch()
│   │   │   │   │   └─> return undef from fetch() - empty buffer
│   │   │   │   └─> return '\t\tconsole.log "y is big"' from fetch()
│   │   │   │   LINE = '\t\tconsole.log "y is big"'
│   │   │   │   enter SmartInput.mapLine('console.log "y is big"', 2)
│   │   │   │   │   check for continuation lines
│   │   │   │   │   enter fetch()
│   │   │   │   │   └─> return '\ty = 5' from fetch()
│   │   │   │   │   enter unfetch('\ty = 5')
│   │   │   │   │   └─> return from unfetch()
│   │   │   │   │   no continuation lines found
│   │   │   │   │   check for HEREDOC
│   │   │   │   │   mapping string
│   │   │   │   └─> return 'console.log "y is big"' from SmartInput.mapLine()
│   │   │   │   MAP: 'console.log "y is big"' => 'console.log "y is big"'
│   │   │   └─> return 'console.log "y is big"', 2 from StringInput.get()
│   │   │   enter StringInput.get() - src unit test
│   │   │   │   enter fetch()
│   │   │   │   └─> return '\ty = 5' from fetch()
│   │   │   │   LINE = '\ty = 5'
│   │   │   │   enter SmartInput.mapLine('y = 5', 1)
│   │   │   │   │   check for continuation lines
│   │   │   │   │   enter fetch()
│   │   │   │   │   └─> return undef from fetch() - empty buffer
│   │   │   │   │   no continuation lines found
│   │   │   │   │   check for HEREDOC
│   │   │   │   │   mapping string
│   │   │   │   └─> return 'y = 5' from SmartInput.mapLine()
│   │   │   │   MAP: 'y = 5' => 'y = 5'
│   │   │   └─> return 'y = 5', 1 from StringInput.get()
│   │   │   enter StringInput.get() - src unit test
│   │   │   │   enter fetch()
│   │   │   │   └─> return undef from fetch() - empty buffer
│   │   │   │   LINE = undef
│   │   │   └─> return undef from StringInput.get() at EOF
│   │   │   lAllPairs:
│   │   │      ---
│   │   │      -
│   │   │         - if (x==42)
│   │   │         - 0
│   │   │      -
│   │   │         - if (y > 100)
│   │   │         - 1
│   │   │      -
│   │   │         - console.log "y is big"
│   │   │         - 2
│   │   │      -
│   │   │         - y = 5
│   │   │         - 1
│   │   └─> return 4 pairs from StringInput.getAll()
│   │   newcode:
│   │      if (x==42)
│   │      \tif (y > 100)
│   │      \t\tconsole.log "y is big"
│   │      \ty = 5
│   │   enter getNeededSymbols()
│   │   │   enter getMissingSymbols()
│   │   │   │   COMPILE CODE:
│   │   │   │      if (x==42)
│   │   │   │      \tif (y > 100)
│   │   │   │      \t\tconsole.log "y is big"
│   │   │   │      \ty = 5
│   │   │   │   enter CodeWalker.getMissingSymbols()
│   │   │   │   │   walking
│   │   │   │   │   enter TreeWalker.walk
│   │   │   │   │   │   walking node
│   │   │   │   │   └─> return from TreeWalker.walk
│   │   │   │   │   done walking
│   │   │   │   └─> return from CodeWalker.getMissingSymbols()
│   │   │   └─> return from getMissingSymbols()
│   │   │   enter getAvailSymbols()
│   │   │   │   search for .symbols from 'C:/Users/johnd/string-input/src'
│   │   │   │   enter pathTo('.symbols','C:/Users/johnd/string-input/src','up')
│   │   │   │   │   check C:/Users/johnd/string-input
│   │   │   │   │   check C:/Users/johnd
│   │   │   │   └─> return from pathTo(): C:/Users/johnd/.symbols
│   │   │   │   .symbols file found at 'C:/Users/johnd/.symbols'
│   │   │   │   enter slurp('C:/Users/johnd/.symbols')
│   │   │   │   └─> return from slurp():
│   │   │   │          @jdeighan/coffee-utils
│   │   │   │          \tsay undef isEmpty nonEmpty  isString
│   │   │   │          @jdeighan/coffee-utils/log
│   │   │   │          \tlog
│   │   │   │          @jdeighan/coffee-utils/fs
│   │   │   │          \tmydir mkpath    backup    slurp barf
│   │   │   │          svelte
│   │   │   │          \tonMount onDestroy
│   │   │   │          @jdeighan/string-input/taml
│   │   │   │          \ttaml
│   │   │   │   Contents of .symbols:
│   │   │   │      @jdeighan/coffee-utils
│   │   │   │      \tsay undef isEmpty nonEmpty  isString
│   │   │   │      @jdeighan/coffee-utils/log
│   │   │   │      \tlog
│   │   │   │      @jdeighan/coffee-utils/fs
│   │   │   │      \tmydir mkpath    backup    slurp barf
│   │   │   │      svelte
│   │   │   │      \tonMount onDestroy
│   │   │   │      @jdeighan/string-input/taml
│   │   │   │      \ttaml
│   │   │   │   in constructor: BUFFER:
│   │   │   │      ---
│   │   │   │      - '@jdeighan/coffee-utils'
│   │   │   │      - "\tsay undef isEmpty nonEmpty  isString"
│   │   │   │      - '@jdeighan/coffee-utils/log'
│   │   │   │      - "\tlog"
│   │   │   │      - '@jdeighan/coffee-utils/fs'
│   │   │   │      - "\tmydir mkpath    backup    slurp barf"
│   │   │   │      - svelte
│   │   │   │      - "\tonMount onDestroy"
│   │   │   │      - '@jdeighan/string-input/taml'
│   │   │   │      - "\ttaml"
│   │   │   │   enter StringInput.getAll()
│   │   │   │   │   enter StringInput.get() - src unit test
│   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   └─> return '@jdeighan/coffee-utils' from fetch()
│   │   │   │   │   │   LINE = '@jdeighan/coffee-utils'
│   │   │   │   │   │   enter SmartInput.mapLine('@jdeighan/coffee-utils', 0)
│   │   │   │   │   │   │   check for continuation lines
│   │   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   │   └─> return '\tsay undef isEmpty nonEmpty  isString' from fetch()
│   │   │   │   │   │   │   enter unfetch('\tsay undef isEmpty nonEmpty  isString')
│   │   │   │   │   │   │   └─> return from unfetch()
│   │   │   │   │   │   │   no continuation lines found
│   │   │   │   │   │   │   check for HEREDOC
│   │   │   │   │   │   │   mapping string
│   │   │   │   │   │   └─> return undef from SmartInput.mapLine()
│   │   │   │   │   │   MAP: '@jdeighan/coffee-utils' => undef
│   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   └─> return '\tsay undef isEmpty nonEmpty  isString' from fetch()
│   │   │   │   │   │   enter SmartInput.mapLine('say undef isEmpty nonEmpty  isString', 1)
│   │   │   │   │   │   │   check for continuation lines
│   │   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   │   └─> return '@jdeighan/coffee-utils/log' from fetch()
│   │   │   │   │   │   │   enter unfetch('@jdeighan/coffee-utils/log')
│   │   │   │   │   │   │   └─> return from unfetch()
│   │   │   │   │   │   │   no continuation lines found
│   │   │   │   │   │   │   check for HEREDOC
│   │   │   │   │   │   │   mapping string
│   │   │   │   │   │   └─> return undef from SmartInput.mapLine()
│   │   │   │   │   │   MAP: 'say undef isEmpty nonEmpty  isString' => undef
│   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   └─> return '@jdeighan/coffee-utils/log' from fetch()
│   │   │   │   │   │   enter SmartInput.mapLine('@jdeighan/coffee-utils/log', 0)
│   │   │   │   │   │   │   check for continuation lines
│   │   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   │   └─> return '\tlog' from fetch()
│   │   │   │   │   │   │   enter unfetch('\tlog')
│   │   │   │   │   │   │   └─> return from unfetch()
│   │   │   │   │   │   │   no continuation lines found
│   │   │   │   │   │   │   check for HEREDOC
│   │   │   │   │   │   │   mapping string
│   │   │   │   │   │   └─> return undef from SmartInput.mapLine()
│   │   │   │   │   │   MAP: '@jdeighan/coffee-utils/log' => undef
│   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   └─> return '\tlog' from fetch()
│   │   │   │   │   │   enter SmartInput.mapLine('log', 1)
│   │   │   │   │   │   │   check for continuation lines
│   │   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   │   └─> return '@jdeighan/coffee-utils/fs' from fetch()
│   │   │   │   │   │   │   enter unfetch('@jdeighan/coffee-utils/fs')
│   │   │   │   │   │   │   └─> return from unfetch()
│   │   │   │   │   │   │   no continuation lines found
│   │   │   │   │   │   │   check for HEREDOC
│   │   │   │   │   │   │   mapping string
│   │   │   │   │   │   └─> return undef from SmartInput.mapLine()
│   │   │   │   │   │   MAP: 'log' => undef
│   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   └─> return '@jdeighan/coffee-utils/fs' from fetch()
│   │   │   │   │   │   enter SmartInput.mapLine('@jdeighan/coffee-utils/fs', 0)
│   │   │   │   │   │   │   check for continuation lines
│   │   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   │   └─> return '\tmydir mkpath    backup    slurp barf' from fetch()
│   │   │   │   │   │   │   enter unfetch('\tmydir mkpath    backup    slurp barf')
│   │   │   │   │   │   │   └─> return from unfetch()
│   │   │   │   │   │   │   no continuation lines found
│   │   │   │   │   │   │   check for HEREDOC
│   │   │   │   │   │   │   mapping string
│   │   │   │   │   │   └─> return undef from SmartInput.mapLine()
│   │   │   │   │   │   MAP: '@jdeighan/coffee-utils/fs' => undef
│   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   └─> return '\tmydir mkpath    backup    slurp barf' from fetch()
│   │   │   │   │   │   enter SmartInput.mapLine('mydir mkpath    backup    slurp barf', 1)
│   │   │   │   │   │   │   check for continuation lines
│   │   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   │   └─> return 'svelte' from fetch()
│   │   │   │   │   │   │   enter unfetch('svelte')
│   │   │   │   │   │   │   └─> return from unfetch()
│   │   │   │   │   │   │   no continuation lines found
│   │   │   │   │   │   │   check for HEREDOC
│   │   │   │   │   │   │   mapping string
│   │   │   │   │   │   └─> return undef from SmartInput.mapLine()
│   │   │   │   │   │   MAP: 'mydir mkpath    backup    slurp barf' => undef
│   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   └─> return 'svelte' from fetch()
│   │   │   │   │   │   enter SmartInput.mapLine('svelte', 0)
│   │   │   │   │   │   │   check for continuation lines
│   │   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   │   └─> return '\tonMount onDestroy' from fetch()
│   │   │   │   │   │   │   enter unfetch('\tonMount onDestroy')
│   │   │   │   │   │   │   └─> return from unfetch()
│   │   │   │   │   │   │   no continuation lines found
│   │   │   │   │   │   │   check for HEREDOC
│   │   │   │   │   │   │   mapping string
│   │   │   │   │   │   └─> return undef from SmartInput.mapLine()
│   │   │   │   │   │   MAP: 'svelte' => undef
│   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   └─> return '\tonMount onDestroy' from fetch()
│   │   │   │   │   │   enter SmartInput.mapLine('onMount onDestroy', 1)
│   │   │   │   │   │   │   check for continuation lines
│   │   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   │   └─> return '@jdeighan/string-input/taml' from fetch()
│   │   │   │   │   │   │   enter unfetch('@jdeighan/string-input/taml')
│   │   │   │   │   │   │   └─> return from unfetch()
│   │   │   │   │   │   │   no continuation lines found
│   │   │   │   │   │   │   check for HEREDOC
│   │   │   │   │   │   │   mapping string
│   │   │   │   │   │   └─> return undef from SmartInput.mapLine()
│   │   │   │   │   │   MAP: 'onMount onDestroy' => undef
│   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   └─> return '@jdeighan/string-input/taml' from fetch()
│   │   │   │   │   │   enter SmartInput.mapLine('@jdeighan/string-input/taml', 0)
│   │   │   │   │   │   │   check for continuation lines
│   │   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   │   └─> return '\ttaml' from fetch()
│   │   │   │   │   │   │   enter unfetch('\ttaml')
│   │   │   │   │   │   │   └─> return from unfetch()
│   │   │   │   │   │   │   no continuation lines found
│   │   │   │   │   │   │   check for HEREDOC
│   │   │   │   │   │   │   mapping string
│   │   │   │   │   │   └─> return undef from SmartInput.mapLine()
│   │   │   │   │   │   MAP: '@jdeighan/string-input/taml' => undef
│   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   └─> return '\ttaml' from fetch()
│   │   │   │   │   │   enter SmartInput.mapLine('taml', 1)
│   │   │   │   │   │   │   check for continuation lines
│   │   │   │   │   │   │   enter fetch()
│   │   │   │   │   │   │   └─> return undef from fetch() - empty buffer
│   │   │   │   │   │   │   no continuation lines found
│   │   │   │   │   │   │   check for HEREDOC
│   │   │   │   │   │   │   mapping string
│   │   │   │   │   │   └─> return undef from SmartInput.mapLine()
│   │   │   │   │   │   MAP: 'taml' => undef
│   │   │   │   │   └─> return undef from StringInput.get()
│   │   │   │   │   lAllPairs = []
│   │   │   │   └─> return 0 pairs from StringInput.getAll()
│   │   │   │   hSymbols:
│   │   │   │      ---
│   │   │   │      say: '@jdeighan/coffee-utils'
│   │   │   │      undef: '@jdeighan/coffee-utils'
│   │   │   │      isEmpty: '@jdeighan/coffee-utils'
│   │   │   │      nonEmpty: '@jdeighan/coffee-utils'
│   │   │   │      isString: '@jdeighan/coffee-utils'
│   │   │   │      log: '@jdeighan/coffee-utils/log'
│   │   │   │      mydir: '@jdeighan/coffee-utils/fs'
│   │   │   │      mkpath: '@jdeighan/coffee-utils/fs'
│   │   │   │      backup: '@jdeighan/coffee-utils/fs'
│   │   │   │      slurp: '@jdeighan/coffee-utils/fs'
│   │   │   │      barf: '@jdeighan/coffee-utils/fs'
│   │   │   │      onMount: svelte
│   │   │   │      onDestroy: svelte
│   │   │   │      taml: '@jdeighan/string-input/taml'
│   │   │   └─> return from getAvailSymbols()
│   │   └─> return from brewCielo() - no needed symbols
