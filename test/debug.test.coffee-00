import {assert} from '@jdeighan/coffee-utils'
# debug.test.cielo

import {UnitTesterNorm, UnitTesterNoNorm} from '@jdeighan/unit-tester'
import {undef, OL, isString} from '@jdeighan/coffee-utils'
import {blockToArray, arrayToBlock} from '@jdeighan/coffee-utils/block'
import {log, setLogger} from '@jdeighan/coffee-utils/log'
import {untabify} from '@jdeighan/coffee-utils/indent'
import {
	setDebugging, debug, funcMatch, debugDebug,
	} from '@jdeighan/coffee-utils/debug'

simple = new UnitTesterNorm()

# ---------------------------------------------------------------------------

lLines = undef
setLogger (str) -> lLines.push(untabify(str))

# ---------------------------------------------------------------------------

(() ->
	setDebugging true
	lLines = []
	debug 'abc'
	simple.equal 25, lLines, ['abc']
	)()

# ---------------------------------------------------------------------------

class TraceTester extends UnitTesterNoNorm

	initialize: () ->
		lLines = []

	transformValue: (block) ->

		for line in blockToArray(block)
			debug line
		return arrayToBlock(lLines)

tester = new TraceTester()

# ---------------------------------------------------------------------------

(() ->
	setDebugging true
	lLines = []
	debug 'enter myfunc'
	debug 'something'
	debug 'more'
	debug 'return 42 from myfunc'
	debug "Answer is 42"
	simple.equal 53, lLines, [
		"enter myfunc"
		"│   something"
		"│   more"
		"└─> return 42 from myfunc"
		"Answer is 42"
		]
	)()

# ---------------------------------------------------------------------------

(() ->
	setDebugging 'myfunc'
	lLines = []
	debug 'enter myfunc'
	debug 'something'
	debug 'more'
	debug 'return 42 from myfunc'
	debug "Answer is 42"
	simple.equal 72, lLines, [
		"enter myfunc"
		"│   something"
		"│   more"
		"└─> return 42 from myfunc"
		]
	)()

# ---------------------------------------------------------------------------

(() ->
	setDebugging true
	lLines = []
	debug 'enter myfunc'
	debug 'something'
	debug 'enter newfunc'
	debug 'something else'
	debug 'return abc from newfunc'
	debug 'return 42 from myfunc'
	simple.equal 91, lLines, [
		"enter myfunc"
		"│   something"
		"│   enter newfunc"
		"│   │   something else"
		"│   └─> return abc from newfunc"
		"└─> return 42 from myfunc"
		]
	)()

# ---------------------------------------------------------------------------

(() ->
	setDebugging "myfunc newfunc"
	lLines = []
	debug 'enter myfunc'
	debug 'something'
	debug 'enter newfunc'
	debug 'something else'
	debug 'return abc from newfunc'
	debug 'return 42 from myfunc'
	simple.equal 112, lLines, [
		"enter myfunc"
		"│   something"
		"│   enter newfunc"
		"│   │   something else"
		"│   └─> return abc from newfunc"
		"└─> return 42 from myfunc"
		]
	)()

# ---------------------------------------------------------------------------

(() ->
	setDebugging "myfunc"
	lLines = []
	debug 'enter myfunc'
	debug 'something'
	debug 'enter newfunc'
	debug 'something else'
	debug 'return abc from newfunc'
	debug 'return 42 from myfunc'
	simple.equal 133, lLines, [
		"enter myfunc"
		"│   something"
		"└─> return 42 from myfunc"
		]
	debugDebug false
	)()

# ---------------------------------------------------------------------------

(() ->
	lLines = []
	obj = {
		first: 1
		second: 2
		}
	debug 'enter myfunc'
	debug 'something'
	debug 'obj', obj
	debug 'return 42 from myfunc'
	simple.equal 153, lLines, [
		"enter myfunc"
		"│   something"
		"│   ------------------------------------------"
		"│   obj:"
		"│      ---"
		"│      first: 1"
		"│      second: 2"
		"│   ------------------------------------------"
		"└─> return 42 from myfunc"
		]
	)()

# ---------------------------------------------------------------------------

(() ->
	lLines = []
	obj = {
		first: "this is the first item in the hash"
		second: "this is the second item in the hash"
		}
	debug 'enter myfunc'
	debug 'something'
	debug 'obj', obj
	debug 'return 42 from myfunc'
	simple.equal 178, lLines, [
		"enter myfunc"
		"│   something"
		"│   ------------------------------------------"
		"│   obj:"
		"│      ---"
		"│      first: this˳is˳the˳first˳item˳in˳the˳hash"
		"│      second: this˳is˳the˳second˳item˳in˳the˳hash"
		"│   ------------------------------------------"
		"└─> return 42 from myfunc"
		]
	)()

# ---------------------------------------------------------------------------
# --- Test ability to debug only a particular function

(() ->
	lLines = []
	setDebugging 'innerFunc'

	debug "enter myfunc"
	debug "something"
	debug "enter innerFunc"
	debug "something else"
	debug "return nothing from innerFunc"
	debug "this should not appear"
	debug "return 42 from myfunc"
	simple.equal 205, lLines, [
		"enter innerFunc"
		"│   something else"
		"└─> return nothing from innerFunc"
		]
	setDebugging false
	)()

# ---------------------------------------------------------------------------
# --- Test ability to debug only a particular function
#     using actual functions!

(() ->
	lLines = []
	setDebugging 'innerFunc'

	innerFunc = () ->

		debug "enter innerFunc()"
		debug "answer is 42"
		x = 42
		debug "return from innerFunc()"
		return

	outerFunc = () ->

		debug "enter outerFunc()"
		innerFunc()
		debug "return from outerFunc()"
		return

	outerFunc()

	simple.equal 238, lLines, [
		"enter innerFunc()"
		"│   answer is 42"
		"└─> return from innerFunc()"
		]
	setDebugging false
	)()

# ---------------------------------------------------------------------------

(() ->
	simple.truthy 249, funcMatch('get', ['get'])
	simple.truthy 250, funcMatch('StringInput.get', ['get'])
	)()

# ---------------------------------------------------------------------------

(() ->
	setDebugging true
	lLines = []

	line = 'first line'
	debug "line is #{OL(line)}"

	simple.equal 262, lLines.length, 1
	simple.equal 263, lLines, [
		"line is 'first˳line'"
		]
	setDebugging false
	)()

# ---------------------------------------------------------------------------

(() ->
	setDebugging true
	lLines = []

	obj = {
		first: "this is the first item in the hash"
		second: "this is the second item in the hash"
		}

	debug 'enter myfunc'
	debug 'return from myfunc', obj
	debug "Answer is 42"
	simple.equal 283, lLines, [
		"enter myfunc"
		"└─> return from myfunc"
		"    ------------------------------------------"
		"       ---"
		"       first: this˳is˳the˳first˳item˳in˳the˳hash"
		"       second: this˳is˳the˳second˳item˳in˳the˳hash"
		"    ------------------------------------------"
		"Answer is 42"
		]
	)()

# ---------------------------------------------------------------------------

(() ->
	setDebugging true
	lLines = []

	longBlock = """
		this is one very long line
		this is another very long line
		"""

	debug 'enter myfunc'
	debug 'return from myfunc', longBlock
	debug "Answer is 42"
	simple.equal 309, lLines, [
		"enter myfunc"
		"└─> return from myfunc"
		"    =========================================="
		"    this˳is˳one˳very˳long˳line"
		"    this˳is˳another˳very˳long˳line"
		"    =========================================="
		"Answer is 42"
		]
	)()

# ---------------------------------------------------------------------------

(() ->
	setDebugging 'get'

	block = """
		enter myfunc
		enter get
		enter fetch
		return from fetch
		return from get
		enter nofunc
		return from nofunc
		enter get
		something
		return from get
		return from myfunc
		"""

	tester.equal 339, block, """
		enter get
		└─> return from get
		enter get
		│   something
		└─> return from get
		"""
	)()

# ---------------------------------------------------------------------------
#     Use new functions: funcDoDebug and funcDoLog

(() ->
	setDebugging (funcName, debugOn) -> debugOn || (funcName=='get')

	block = """
		enter myfunc
		enter get
		enter fetch
		return from fetch
		return from get
		enter nofunc
		return from nofunc
		enter get
		something
		return from get
		return from myfunc
		"""

	tester.equal 368, block, """
		enter get
		└─> return from get
		enter get
		│   something
		└─> return from get
		"""
	)()

# ---------------------------------------------------------------------------
#     Use new functions: funcDoDebug and funcDoLog

(() ->
	setDebugging (funcName) -> (funcName=='get')

	block = """
		enter myfunc
		enter get
		enter fetch
		return from fetch
		return from get
		enter nofunc
		return from nofunc
		enter get
		something
		return from get
		return from myfunc
		"""

	tester.equal 397, block, """
		enter get
		└─> return from get
		enter get
		│   something
		└─> return from get
		"""
	)()

# ---------------------------------------------------------------------------
#     Test debugging object methods

(() ->
	class StrInput

		mapArray: (lLines) ->
			result = ''
			for line in lLines
				result += @mapLine(line)
				result += "\n"
			return result

		mapLine: (line, level) ->

			debug "enter StrInput.mapLine()"
			assert line? && isString(line), "StrInput.mapLine(): not a string"
			line = "> #{line}"
			debug "return #{OL(line)} from StrInput.mapLine()"
			return line

	setDebugging true
	lLines = []
	input = new StrInput()
	result = input.mapArray(['abc','def'])

	simple.equal 432, result, "> abc\n> def\n"
	simple.equal 433, lLines, [
		'enter StrInput.mapLine()',
		"└─> return '>˳abc' from StrInput.mapLine()",
		'enter StrInput.mapLine()',
		"└─> return '>˳def' from StrInput.mapLine()"
		]
	)()

# ---------------------------------------------------------------------------
#     Test debugging particular functions

(() ->

	func = (x) ->

		debug "enter func()"
		debug "got #{x}"
		debug "return from func()"
		return

	coffeeCodeToJS = (code) ->

		debug "enter coffeeCodeToJS()"
		func(5)
		debug "return from coffeeCodeToJS()"
		return

	setDebugging 'coffeeCodeToJS'
	lLines = []

	coffeeCodeToJS("x = 42")

	simple.equal 465, lLines, [
		'enter coffeeCodeToJS()'
		'└─> return from coffeeCodeToJS()'
		]
	)()

# ---------------------------------------------------------------------------
