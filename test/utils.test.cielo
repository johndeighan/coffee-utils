# utils.test.cielo

import {UnitTester} from '@jdeighan/coffee-utils/test'
import {
	say, undef, error, warn, isString, isObject, isArray, isHash,
	isEmpty, nonEmpty, isComment, getClassName, isNumber,
	isFunction, isInteger, rtrim,
	ltrunc, rtrunc, extractMatches,
	words, escapeStr, titleLine,
	removeCR, CWS, isArrayOfHashes,
	oneline, croak, isRegExp, uniq, hashToStr, envVarsWithPrefix,
	} from '@jdeighan/coffee-utils'
import {setLogger} from '@jdeighan/coffee-utils/log'
import {setDebugging} from '@jdeighan/coffee-utils/debug'
import {arrayToBlock} from '@jdeighan/coffee-utils/block'

simple = new UnitTester()

# ---------------------------------------------------------------------------

simple.truthy {{LINE}}, isEmpty('')
simple.truthy {{LINE}}, isEmpty('  \t\t')
simple.truthy {{LINE}}, isEmpty([])
simple.truthy {{LINE}}, isEmpty({})

simple.truthy {{LINE}}, nonEmpty('a')
simple.truthy {{LINE}}, nonEmpty('.')
simple.truthy {{LINE}}, nonEmpty([2])
simple.truthy {{LINE}}, nonEmpty({width: 2})

simple.truthy {{LINE}}, isComment("# a comment")
simple.truthy {{LINE}}, isComment("### a comment")
simple.truthy {{LINE}}, isComment("#\ta comment")
simple.truthy {{LINE}}, isComment("###\ta comment")
simple.truthy {{LINE}}, isComment("   # a comment")
simple.truthy {{LINE}}, isComment("   ### a comment")
simple.falsy  {{LINE}}, isComment("not much")
simple.falsy  {{LINE}}, isComment("#foreach x in lItems")
simple.truthy {{LINE}}, isComment('#')
simple.truthy {{LINE}}, isComment('   #')
simple.truthy {{LINE}}, isComment('   ###')
simple.falsy  {{LINE}}, isComment('#for')
simple.falsy  {{LINE}}, isComment('   #for')
simple.falsy  {{LINE}}, isComment('#for line in lLines')

simple.equal  {{LINE}}, titleLine('a thing').length, 42
simple.equal  {{LINE}}, titleLine('a thing','-',5,90).length, 90

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, uniq([1,2,2,3,3]), [1,2,3]
simple.equal {{LINE}}, uniq(['a','b','b','c','c']),['a','b','c']

# ---------------------------------------------------------------------------
# CURRENTLY DOES NOT PASS

# simple.equal {{LINE}}, hashToStr({c:3, b:2, a:1}), """
# 		{
# 		   "a": 1,
# 		   "b": 2,
# 		   "c": 3
# 		}
# 		"""

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, rtrim("abc"), "abc"
simple.equal {{LINE}}, rtrim("  abc"), "  abc"
simple.equal {{LINE}}, rtrim("abc  "), "abc"
simple.equal {{LINE}}, rtrim("  abc  "), "  abc"

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, words('a b c'), ['a', 'b', 'c']
simple.equal {{LINE}}, words('  a   b   c  '), ['a', 'b', 'c']

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, escapeStr("\t\tXXX\n"), "\\t\\tXXX\\n"
hEsc = {
	"\n": "\\n"
	"\t": "\\t"
	"\"": "\\\""
	}
simple.equal {{LINE}}, escapeStr("\thas quote: \"\nnext line", hEsc), \
	"\\thas quote: \\\"\\nnext line"

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, rtrunc('/user/lib/.env', 5), '/user/lib'
simple.equal {{LINE}}, ltrunc('abcdefg', 3), 'defg'

simple.equal {{LINE}}, removeCR("abc\r\ndef\r\n"), "abc\ndef\n"
simple.equal {{LINE}}, CWS("""
		abc
		def
				ghi
		"""), "abc def ghi"

# ---------------------------------------------------------------------------

simple.truthy {{LINE}}, isArrayOfHashes([])
simple.truthy {{LINE}}, isArrayOfHashes([{}, {}])
simple.truthy {{LINE}}, isArrayOfHashes([{a: 1, b:2}, {}])
simple.truthy {{LINE}}, isArrayOfHashes([{a: 1, b:2, c: [1,2,3]}, {}])

simple.falsy  {{LINE}}, isArrayOfHashes({})
simple.falsy  {{LINE}}, isArrayOfHashes([1,2,3])
simple.falsy  {{LINE}}, isArrayOfHashes([{a: 1, b:2, c: [1,2,3]}, 4])
simple.falsy  {{LINE}}, isArrayOfHashes([{a: 1, b:2, c: [1,2,3]}, {}, [1,2]])

# ---------------------------------------------------------------------------

(() ->
	class NewClass

	h = {a:1, b:2}
	l = [1,2,2]
	o = new NewClass()
	n = 42
	n2 = new Number(42)
	s = 'simple'
	s2 = new String('abc')

	simple.truthy {{LINE}}, isHash(h)
	simple.falsy  {{LINE}}, isHash(l)
	simple.falsy  {{LINE}}, isHash(o)
	simple.falsy  {{LINE}}, isHash(n)
	simple.falsy  {{LINE}}, isHash(n2)
	simple.falsy  {{LINE}}, isHash(s)
	simple.falsy  {{LINE}}, isHash(s2)

	simple.falsy  {{LINE}}, isArray(h)
	simple.truthy {{LINE}}, isArray(l)
	simple.falsy  {{LINE}}, isArray(o)
	simple.falsy  {{LINE}}, isArray(n)
	simple.falsy  {{LINE}}, isArray(n2)
	simple.falsy  {{LINE}}, isArray(s)
	simple.falsy  {{LINE}}, isArray(s2)

	simple.falsy  {{LINE}}, isString(undef)
	simple.falsy  {{LINE}}, isString(h)
	simple.falsy  {{LINE}}, isString(l)
	simple.falsy  {{LINE}}, isString(o)
	simple.falsy  {{LINE}}, isString(n)
	simple.falsy  {{LINE}}, isString(n2)
	simple.truthy {{LINE}}, isString(s)
	simple.truthy {{LINE}}, isString(s2)

	simple.falsy  {{LINE}}, isObject(h)
	simple.falsy  {{LINE}}, isObject(l)
	simple.truthy {{LINE}}, isObject(o)
	simple.falsy  {{LINE}}, isObject(n)
	simple.falsy  {{LINE}}, isObject(n2)
	simple.falsy  {{LINE}}, isObject(s)
	simple.falsy  {{LINE}}, isObject(s2)

	simple.falsy  {{LINE}}, isNumber(h)
	simple.falsy  {{LINE}}, isNumber(l)
	simple.falsy  {{LINE}}, isNumber(o)
	simple.truthy {{LINE}}, isNumber(n)
	simple.truthy {{LINE}}, isNumber(n2)
	simple.falsy  {{LINE}}, isNumber(s)
	simple.falsy  {{LINE}}, isNumber(s2)

	)()

# ---------------------------------------------------------------------------

simple.truthy {{LINE}}, isFunction(() -> pass)
simple.falsy  {{LINE}}, isFunction(23)

simple.truthy {{LINE}}, isInteger(42)
simple.truthy {{LINE}}, isInteger(new Number(42))
simple.falsy  {{LINE}}, isInteger('abc')
simple.falsy  {{LINE}}, isInteger({})
simple.falsy  {{LINE}}, isInteger([])

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, oneline(undef), "undef"
simple.equal {{LINE}}, oneline("\t\tabc\nxyz"), "'\\t\\tabc\\nxyz'"
simple.equal {{LINE}}, oneline({a:1, b:'xyz'}), '{"a":1,"b":"xyz"}'

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, CWS("""
		a simple
		error message
		"""), "a simple error message"

# ---------------------------------------------------------------------------
# test croak()

(() ->
	lLines = []
	setLogger (line) -> lLines.push(line)

	obj = {a:1, b:2}
	try
		croak "bad stuff", "An Object", obj
	simple.equal {{LINE}}, arrayToBlock(lLines), """
		ERROR (croak): bad stuff
		An Object = {"a":1,"b":2}
		"""
	setLogger()
	)()

# ---------------------------------------------------------------------------
# test isRegExp()

simple.truthy {{LINE}}, isRegExp(/^abc$/)
simple.truthy {{LINE}}, isRegExp(///^
		\s*
		where
		\s+
		areyou
		$///)
simple.falsy  {{LINE}}, isRegExp(42)
simple.falsy  {{LINE}}, isRegExp('abc')
simple.falsy  {{LINE}}, isRegExp([1,'a'])
simple.falsy  {{LINE}}, isRegExp({a:1, b:'ccc'})
simple.falsy  {{LINE}}, isRegExp(undef)

simple.truthy {{LINE}}, isRegExp(/\.coffee/)

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, extractMatches("..3 and 4 plus 5", /\d+/g, parseInt),
	[3, 4, 5]
simple.equal {{LINE}}, extractMatches("And This Is A String", /A/g), ['A','A']

# ---------------------------------------------------------------------------

process.env["A"] = 'one'
process.env["cielo.B"] = 'two'
process.env["C"] = 'three'
process.env["cielo.D"] = 'four'

h = envVarsWithPrefix('cielo.')
simple.equal {{LINE}}, h, {"cielo.B": 'two', "cielo.D": 'four'}

h = envVarsWithPrefix('cielo.', {stripPrefix: true})
simple.equal {{LINE}}, h, {B: 'two', D: 'four'}
