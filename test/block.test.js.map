{
  "version": 3,
  "file": "block.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\block.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# block.test.coffee\n\nimport {undef, toArray, toBlock} from '@jdeighan/base-utils'\nimport {assert} from '@jdeighan/base-utils/exceptions'\nimport {LOG} from '@jdeighan/base-utils/log'\n\nimport {utest} from '@jdeighan/base-utils/utest'\nimport {\n\tfirstLine, remainingLines,\n\tnormalizeBlock, truncateBlock, joinBlocks,\n\t} from '@jdeighan/coffee-utils/block'\nimport {mydir, mkpath} from '@jdeighan/coffee-utils/fs'\n\ntestDir = mydir(`import.meta.url`)\n\n# ---------------------------------------------------------------------------\n\nutest.equal toArray(\"abc\\nxyz\\n\"), [\n\t'abc'\n\t'xyz'\n\t''\n\t]\n\nutest.equal toArray(\"abc\\nxyz\"), [\n\t'abc'\n\t'xyz'\n\t]\n\nutest.equal toArray(\"abc\\n\\nxyz\\n\"), [\n\t'abc'\n\t''\n\t'xyz'\n\t''\n\t]\n\n# ---------------------------------------------------------------------------\n\nutest.equal toArray(\"abc\\nxyz\"), [\n\t'abc'\n\t'xyz'\n\t]\n\nutest.equal toArray(\"\"\"\n\tabc\n\txyz\n\t\"\"\"), [\n\t'abc'\n\t'xyz'\n\t]\n\nutest.equal toArray(\"\"\"\n\tabc\n\txyz\n\t\"\"\", 'noEmptyLines'), [\n\t'abc'\n\t'xyz'\n\t]\n\nutest.equal toArray(\"\"\"\n\tstart   tag        start\n\tstart   '#if'      if1\n\tstart   EOF        end\n\tif1     tag        start   {/if}\n\tif1     '#elsif'   if1\n\tif1     EOF        end     {/if}\n\tif1     '#else'    if2\n\tif2     tag        start   {/if}\n\tif2     '#if'      if1     {/if}\n\tif2     EOF        end     {/if}\n\t\"\"\"), [\n\t\"start   tag        start\"\n\t\"start   '#if'      if1\"\n\t\"start   EOF        end\"\n\t\"if1     tag        start   {/if}\"\n\t\"if1     '#elsif'   if1\"\n\t\"if1     EOF        end     {/if}\"\n\t\"if1     '#else'    if2\"\n\t\"if2     tag        start   {/if}\"\n\t\"if2     '#if'      if1     {/if}\"\n\t\"if2     EOF        end     {/if}\"\n\t]\n\nutest.equal toArray(\"\"\"\n\tstart   tag        start\n\tstart   '#if'      if1\n\tstart   EOF        end\n\tif1     tag        start   {/if}\n\tif1     '#elsif'   if1\n\tif1     EOF        end     {/if}\n\tif1     '#else'    if2\n\tif2     tag        start   {/if}\n\tif2     '#if'      if1     {/if}\n\tif2     EOF        end     {/if}\n\t\"\"\", 'noEmptyLines'), [\n\t\"start   tag        start\"\n\t\"start   '#if'      if1\"\n\t\"start   EOF        end\"\n\t\"if1     tag        start   {/if}\"\n\t\"if1     '#elsif'   if1\"\n\t\"if1     EOF        end     {/if}\"\n\t\"if1     '#else'    if2\"\n\t\"if2     tag        start   {/if}\"\n\t\"if2     '#if'      if1     {/if}\"\n\t\"if2     EOF        end     {/if}\"\n\t]\n\nutest.equal toArray(\"abc\\n\\nxyz\"), [\n\t'abc'\n\t''\n\t'xyz'\n\t]\n\nutest.equal toArray(\"abc\\n\\n\\nxyz\\n\"), [\n\t'abc'\n\t''\n\t''\n\t'xyz'\n\t''\n\t]\n\n# ... pass in an array\n\nutest.equal toArray([\"abc\", \"xyz\"]), [\n\t'abc'\n\t'xyz'\n\t]\n\nutest.equal toArray([\"abc\", \"\", \"xyz\"]), [\n\t'abc'\n\t''\n\t'xyz'\n\t]\n\nutest.equal toArray([\"abc\", \"\", \"\", \"xyz\", \"\"]), [\n\t'abc'\n\t''\n\t''\n\t'xyz'\n\t''\n\t]\n\n# ---------------------------------------------------------------------------\n\nutest.equal toArray(['abc','xyz']), [\n\t'abc'\n\t'xyz'\n\t]\n\nutest.equal toArray(['abc','xyz','']), [\n\t'abc'\n\t'xyz'\n\t''\n\t]\n\nutest.equal toArray(['abc','','xyz']), [\n\t'abc'\n\t''\n\t'xyz'\n\t]\n\n# ---------------------------------------------------------------------------\n# --- MUST also split internal strings\n\nutest.equal toArray(['abc\\ndef', 'ghi']), [\n\t'abc'\n\t'def'\n\t'ghi'\n\t]\n\n# ---------------------------------------------------------------------------\n# --- test toBlock()\n\nutest.equal toBlock(undef), ''\nutest.equal toBlock([]), \"\"\nutest.equal toBlock([\"\"]), \"\"\nutest.equal toBlock([\"\", \"\"]), \"\\n\"\nutest.equal toBlock(['a', 'b', 'c']), \"a\\nb\\nc\"\nutest.equal toBlock(['a ', 'b ', 'c ']), \"a\\nb\\nc\"\nutest.equal toBlock(['a','b','c']), \"a\\nb\\nc\"\nutest.equal toBlock(['a',undef,'b','c']), \"a\\nb\\nc\"\nutest.equal toBlock([undef,'a','b','c',undef]), \"a\\nb\\nc\"\n\n# ---------------------------------------------------------------------------\n\nutest.equal firstLine(\"\"\"\n\t#starbucks\n\tdo this\n\tdo that\n\t\"\"\"), '#starbucks'\n\n# ---------------------------------------------------------------------------\n\nutest.equal remainingLines(\"\"\"\n\t#starbucks\n\tdo this\n\tdo that\n\t\"\"\"), \"\"\"\n\tdo this\n\tdo that\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tstr = joinBlocks('import me', '', 'do this\\ndo that')\n\tutest.equal str, \"\"\"\n\t\timport me\n\t\tdo this\n\t\tdo that\n\t\t\"\"\"\n\t)()\n\nutest.equal joinBlocks('a', 'b'), \"a\\nb\"\nutest.equal joinBlocks(['a', 'b']), \"a\\nb\"\n# utest.equal {{LINE}}, joinBlocks([['a', 'b']]), \"a\\nb\"\nutest.equal joinBlocks(['a'], ['b']), \"a\\nb\"\n\n# ---------------------------------------------------------------------------\n\nutest.equal normalizeBlock(\"\"\"\n\tline 1\n\tline 2\n\t\"\"\"), \"\"\"\n\tline 1\n\tline 2\n\t\"\"\"\n\nutest.equal normalizeBlock(\"\"\"\n\tline 1\n\n\tline 2\n\t\"\"\"), \"\"\"\n\tline 1\n\tline 2\n\t\"\"\"\n\nutest.equal normalizeBlock(\"\"\"\n\n\tline 1\n\n\tline 2\n\n\n\t\"\"\"), \"\"\"\n\tline 1\n\tline 2\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nutest.equal truncateBlock(\"\"\"\n\tline 1\n\tline 2\n\tline 3\n\tline 4\n\t\"\"\", 2), \"\"\"\n\tline 1\n\tline 2\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tlBlocks = [\n\t\t\"import {say} from '@jdeighan/coffee-utils'\",\n\t\t\"\",\n\t\t\"<script>\\n\\tx = 42\\n</script>\",\n\t\t\"\",\n\t\t]\n\tstr = joinBlocks(lBlocks...)\n\tutest.equal str, \"\"\"\n\t\timport {say} from '@jdeighan/coffee-utils'\n\t\t<script>\n\t\t\tx = 42\n\t\t</script>\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tlImports = [\n\t\t\"import {say} from '@jdeighan/coffee-utils'\",\n\t\t]\n\tcode = \"\"\"\n\t\tif (x==42)\n\t\t\tLOG \"line 2 in unit test\"\n\t\t\"\"\"\n\tstr = joinBlocks(lImports..., code)\n\tutest.equal str, \"\"\"\n\t\timport {say} from '@jdeighan/coffee-utils'\n\t\tif (x==42)\n\t\t\tLOG \"line 2 in unit test\"\n\t\t\"\"\"\n\t)()\n"
  ]
}