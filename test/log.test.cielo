# log.test.cielo

import {UnitTesterNorm, UnitTester} from '@jdeighan/unit-tester'
import {undef, escapeStr} from '@jdeighan/coffee-utils'
import {arrayToBlock} from '@jdeighan/coffee-utils/block'
import {
	stringify, setStringifier, log, LOG, logItem, setLogger,
	tamlStringify, orderedStringify,
	} from '@jdeighan/coffee-utils/log'

simple = new UnitTesterNorm()
lLines = undef
setLogger (str) -> lLines.push(str)

# ---------------------------------------------------------------------------

class LogTester extends UnitTester

	transformValue: (lLines) ->
		return arrayToBlock(lLines)

	transformExpected: (str) ->
		return str.replace(/\t/g, '    ')

tester = new LogTester()

# ---------------------------------------------------------------------------

(() ->
	lLines = []
	log 'enter myfunc'
	tester.equal {{LINE}}, lLines, """
		enter myfunc
		"""
	)()

# ---------------------------------------------------------------------------

(() ->
	lLines = []
	log 'abc'
	log 'def'
	log 'ghi'
	tester.equal {{LINE}}, lLines, """
		abc
		def
		ghi
		"""
	)()

# ---------------------------------------------------------------------------
# test logging various small objects

(() ->
	lLines = []
	log 'abc'
	logItem 'name', undef
	tester.equal {{LINE}}, lLines, """
		abc
		name = undef
		"""
	)()

(() ->
	lLines = []
	log 'abc'
	logItem 'name', 42
	tester.equal {{LINE}}, lLines, """
		abc
		name = 42
		"""
	)()

(() ->
	lLines = []
	log 'abc'
	logItem 'name', 'John'
	tester.equal {{LINE}}, lLines, """
		abc
		name = 'John'
		"""
	)()

(() ->
	lLines = []
	log 'abc'
	logItem 'name', {a: 1, b: 'xyz'}
	tester.equal {{LINE}}, lLines, """
		abc
		name:
			---
			a: 1
			b: xyz
		"""
	)()

(() ->
	lLines = []
	logItem 'name', ['a', 42, [1,2]]
	tester.equal {{LINE}}, lLines, """
		name:
			---
			- a
			- 42
			-
				- 1
				- 2
		"""
	)()

# ---------------------------------------------------------------------------
# test logging various large objects

(() ->
	lLines = []
	log 'abc'
	logItem 'name', """
		This is a rather long bit of
		text which changes
		how it's displayed
		"""
	tester.equal {{LINE}}, lLines, """
		abc
		name:
			==========================================
			This˳is˳a˳rather˳long˳bit˳of
			text˳which˳changes
			how˳it's˳displayed
			==========================================
		"""
	)()

(() ->
	lLines = []
	log 'abc'
	logItem 'name', {
		fname: 'John',
		lname: 'Deighan',
		age: 68,
		home: 'Blacksburg, VA',
		}
	tester.equal {{LINE}}, lLines, """
		abc
		name:
			---
			age: 68
			fname: John
			home: Blacksburg,˳VA
			lname: Deighan
		"""
	)()

(() ->
	lLines = []
	log 'abc'
	logItem 'name', [
		68,
		'a rather long string of text',
		{a:1, b:2}
		]
	tester.equal {{LINE}}, lLines, """
		abc
		name:
			---
			- 68
			- a˳rather˳long˳string˳of˳text
			-
				a: 1
				b: 2
		"""
	)()

# ---------------------------------------------------------------------------
# test ordered stringifier

(() ->
	setStringifier orderedStringify

	lLines = []
	log 'abc'
	logItem 'name', {
		fname: 'John',
		lname: 'Deighan',
		age: 68,
		home: 'Blacksburg, VA',
		}
	tester.equal {{LINE}}, lLines, """
		abc
		name:
			---
			age: 68
			fname: John
			home: Blacksburg,˳VA
			lname: Deighan
		"""

	setStringifier tamlStringify    # reset
	)()

# ---------------------------------------------------------------------------
# test providing a prefix

(() ->
	lLines = []
	logItem 'name', undef, {prefix: '<-->'}
	tester.equal {{LINE}}, lLines, """
		<-->name = undef
		"""
	)()

(() ->
	lLines = []
	logItem 'name', 42, {prefix: '<-->'}
	tester.equal {{LINE}}, lLines, """
		<-->name = 42
		"""
	)()

(() ->
	lLines = []
	logItem 'name', 'John', {prefix: '<-->'}
	tester.equal {{LINE}}, lLines, """
		<-->name = 'John'
		"""
	)()

(() ->
	lLines = []
	logItem 'name', {a: 1, b: 'xyz'}, {prefix: '<-->'}
	tester.equal {{LINE}}, lLines, """
		<-->name:
		<-->	---
		<-->	a: 1
		<-->	b: xyz
		"""
	)()

(() ->
	lLines = []
	logItem 'name', ['a', 42, [1,2]], {prefix: '<-->'}
	tester.equal {{LINE}}, lLines, """
		<-->name:
		<-->	---
		<-->	- a
		<-->	- 42
		<-->	-
		<-->		- 1
		<-->		- 2
		"""
	)()

(() ->
	lLines = []
	logItem 'name', """
		This is a rather long bit of
		text which changes
		how it's displayed
		""", {prefix: '<-->'}
	tester.equal {{LINE}}, lLines, """
		<-->name:
		<-->	==========================================
		<-->	This˳is˳a˳rather˳long˳bit˳of
		<-->	text˳which˳changes
		<-->	how˳it's˳displayed
		<-->	==========================================
		"""
	)()

(() ->
	lLines = []
	logItem 'name', {
		fname: 'John',
		lname: 'Deighan',
		age: 68,
		home: 'Blacksburg, VA',
		}, {prefix: '<-->'}
	tester.equal {{LINE}}, lLines, """
		<-->name:
		<-->	---
		<-->	fname: John
		<-->	lname: Deighan
		<-->	age: 68
		<-->	home: Blacksburg,˳VA
		"""
	)()

(() ->
	lLines = []
	logItem 'name', [
		68,
		'a rather long string of text',
		{a:1, b:2}
		], {prefix: '<-->'}
	tester.equal {{LINE}}, lLines, """
		<-->name:
		<-->	---
		<-->	- 68
		<-->	- a˳rather˳long˳string˳of˳text
		<-->	-
		<-->		a: 1
		<-->		b: 2
		"""
	)()

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, tamlStringify({a:"word", b:"blind"}), """
	---
	a: word
	b: blind
	"""
simple.equal {{LINE}}, stringify({a:"word", b:"blind"}), """
	---
	a: word
	b: blind
	"""

setStringifier JSON.stringify

simple.equal {{LINE}}, stringify({a:"word", b:"blind"}),
		'{"a":"word","b":"blind"}'

setStringifier tamlStringify

simple.equal {{LINE}}, stringify({a:"word", b:"blind"}), """
	---
	a: word
	b: blind
	"""

# ---------------------------------------------------------------------------

(() ->
	lItems = []
	setLogger (item) -> lItems.push(item)
	log 'a'
	log 'b'
	log 'c'
	setLogger console.log

	simple.equal {{LINE}}, lItems, ['a','b','c']
	)()

(() ->
	lItems = []
	setLogger (item) -> lItems.push(item)
	log 'a'
	log 'b'
	log 'c'
	setLogger console.log

	simple.equal {{LINE}}, lItems, ['a','b','c']
	)()

simple.fails {{LINE}}, () -> error("an error message")

# ---------------------------------------------------------------------------
