# indent.test.cielo

import assert from 'assert'

import {UnitTesterNorm} from '@jdeighan/unit-tester'
import {isInteger} from '@jdeighan/coffee-utils'
import {
	indentLevel, indentation, undented, splitLine,
	indented, tabify, untabify,
	} from '@jdeighan/coffee-utils/indent'

simple = new UnitTesterNorm("indent.test")

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, indentLevel("abc"), 0
simple.equal {{LINE}}, indentLevel("\tabc"), 1
simple.equal {{LINE}}, indentLevel("\t\tabc"), 2

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, indentation(0), ''
simple.equal {{LINE}}, indentation(1), "\t"
simple.equal {{LINE}}, indentation(2), "\t\t"

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, undented("abc"), "abc"
simple.equal {{LINE}}, undented("\tabc"), "abc"
simple.equal {{LINE}}, undented("\t\tabc"), "abc"
simple.equal {{LINE}}, undented("\t\tabc", 0), "\t\tabc"
simple.equal {{LINE}}, undented("\t\tabc", 1), "\tabc"
simple.equal {{LINE}}, undented("\t\tabc", 2), "abc"

# ---------------------------------------------------------------------------

(() ->
	block = "\t\tfirst\n\t\tsecond\n\t\t\tthird\n"
	expected = "first\nsecond\n\tthird\n"
	simple.equal {{LINE}}, undented(block), expected
	)()

# ---------------------------------------------------------------------------

(() ->
	array = [
		"\t\tfirst",
		"\t\tsecond",
		"\t\t\tthird"
		]
	expected = [
		"first",
		"second",
		"\tthird"
		]
	simple.equal {{LINE}}, undented(array), expected
	)()

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, splitLine("abc"), [0, "abc"]
simple.equal {{LINE}}, splitLine("\tabc"), [1, "abc"]
simple.equal {{LINE}}, splitLine("\t\tabc"), [2, "abc"]
simple.equal {{LINE}}, splitLine(""),       [0, ""]
simple.equal {{LINE}}, splitLine("\t\t\t"), [0, ""]
simple.equal {{LINE}}, splitLine("\t \t"),  [0, ""]
simple.equal {{LINE}}, splitLine("   "),    [0, ""]

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, indented("abc", 0), "abc"
simple.equal {{LINE}}, indented("abc", 1), "\tabc"
simple.equal {{LINE}}, indented("abc", 2), "\t\tabc"

# --- empty lines, indented, should just be empty lines
simple.equal {{LINE}}, indented("abc\n\ndef", 2), "\t\tabc\n\n\t\tdef"

(() ->
	str = "main\n\toverflow: auto\n\nnav\n\toverflow: auto"
	exp = "\tmain\n\t\toverflow: auto\n\n\tnav\n\t\toverflow: auto"
	simple.equal 59, indented(str, 1), exp
	)()

# --- indented also handles arrays, so test them, too

# --- empty lines, indented, should just be empty lines
simple.equal {{LINE}}, indented(['abc','','def'], 2), '\t\tabc\n\n\t\tdef'

(() ->
	lLines = ['main','\toverflow: auto','','nav','\toverflow: auto']
	lExp   = '\tmain\n\t\toverflow: auto\n\n\tnav\n\t\toverflow: auto'
	simple.equal {{LINE}}, indented(lLines, 1), lExp
	)()

# ---------------------------------------------------------------------------

(() ->
	prefix = '   '    # 3 spaces

	simple.equal {{LINE}}, tabify("""
		first line
		#{prefix}second line
		#{prefix}#{prefix}third line
		""", 3), """
		first line
		\tsecond line
		\t\tthird line
		"""
	)()

# ---------------------------------------------------------------------------
# you don't need to tell it number of spaces

(() ->
	prefix = '   '    # 3 spaces

	simple.equal {{LINE}}, tabify("""
		first line
		#{prefix}second line
		#{prefix}#{prefix}third line
		"""), """
		first line
		\tsecond line
		\t\tthird line
		"""
	)()

# ---------------------------------------------------------------------------

(() ->
	prefix = '   '    # 3 spaces

	simple.equal {{LINE}}, untabify("""
		first line
		\tsecond line
		\t\tthird line
		""", 3), """
		first line
		#{prefix}second line
		#{prefix}#{prefix}third line
		"""
	)()

# ---------------------------------------------------------------------------

simple.equal {{LINE}}, indented("export name = undef", 1), "\texport name = undef"
simple.equal {{LINE}}, indented("export name = undef", 2), "\t\texport name = undef"

# ---------------------------------------------------------------------------
# make sure indentLevel() works for blocks

simple.equal {{LINE}}, indentLevel("\t\tabc\n\t\tdef\n\t\t\tghi"), 2
