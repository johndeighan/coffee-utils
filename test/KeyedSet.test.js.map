{
  "version": 3,
  "file": "KeyedSet.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\KeyedSet.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# KeyedSet.test.coffee\n\nimport {undef} from '@jdeighan/base-utils'\nimport {\n\tassert, croak, haltOnError, suppressExceptionLogging,\n\t} from '@jdeighan/base-utils/exceptions'\nimport {LOG, LOGVALUE} from '@jdeighan/base-utils/log'\nimport {utest} from '@jdeighan/base-utils/utest'\nimport {KeyedSet} from '@jdeighan/coffee-utils/keyedset'\n\nhaltOnError false\nsuppressExceptionLogging true\n\n# ---------------------------------------------------------------------------\n\nutest.succeeds () ->\n\tset = new KeyedSet('users', 'name')\n\tset.add 'John Doe'\n\tset.add 'Lewis Foster', {title: 'head developer'}\n\tset.update 'Lewis Foster', {title: 'lead developer'}\n\tset.remove 'John Doe'\n\nutest.succeeds () ->\n\tset = new KeyedSet('users', ['firstName', 'lastName'])\n\tset.add ['John', 'Doe']\n\tset.add ['Lewis', 'Foster'], {title: 'head developer'}\n\n# ---------------------------------------------------------------------------\n\n# --- 2nd arg to constructor must be string or array\nutest.throws () ->\n\tset = new KeyedSet('users', 23)\n\n# --- set name must be a string\nutest.throws () ->\n\tset = new KeyedSet(23, 'name')\n\n# --- set name can't be empty\nutest.throws () ->\n\tset = new KeyedSet('', 'name')\n\n# --- key name cannot be empty string\nutest.throws () ->\n\tset = new KeyedSet('users', '')\n\n# --- key name cannot contain empty string\nutest.throws () ->\n\tset = new KeyedSet('users', ['fName', '', 'lName'])\n\n# --- add() must use same key type\nutest.throws () ->\n\tset = new KeyedSet('users', ['fName', 'lName'])\n\tset.add 'John Doe'\n\nutest.throws () ->\n\tset = new KeyedSet('users', 'name')\n\tset.add ['John', 'Doe']\n\n# --- You can only update or delete existing items\nutest.throws () ->\n\tset = new KeyedSet('users', 'name')\n\tset.add 'John Doe'\n\tset.update 'Billy Bob', {title: 'screwup'}\n\nutest.throws () ->\n\tset = new KeyedSet('users', 'name')\n\tset.add 'John Doe'\n\tset.remove 'Billy Bob', {title: 'screwup'}\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tset = new KeyedSet('users', 'name')\n\tset.add 'John Doe', {value: 100000}\n\n\tutest.equal set.get('John Doe'), {\n\t\tname: 'John Doe'\n\t\tvalue: 100000\n\t\t}\n\n\tset.add 'Billy Bob', {title: 'cowboy'}\n\tutest.equal set.getAllItems(), [\n\t\t{name: 'John Doe', value: 100000}\n\t\t{name: 'Billy Bob', title: 'cowboy'}\n\t\t]\n\n\tset.remove 'John Doe'\n\tutest.equal set.getAllItems(), [\n\t\t{name: 'Billy Bob', title: 'cowboy'}\n\t\t]\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tset = new KeyedSet('users', ['fName','lName'])\n\tset.add ['John','Doe'], {value: 100000}\n\n\tutest.truthy set.has(['John','Doe'])\n\n\tutest.equal set.get(['John','Doe']), {\n\t\tfName: 'John'\n\t\tlName: 'Doe'\n\t\tvalue: 100000\n\t\t}\n\n\tset.add ['Billy','Bob'], {title: 'cowboy'}\n\tutest.equal set.getAllItems(), [\n\t\t{fName: 'John',  lName: 'Doe', value: 100000}\n\t\t{fName: 'Billy', lName: 'Bob', title: 'cowboy'}\n\t\t]\n\n\tset.remove ['John','Doe']\n\tutest.equal set.getAllItems(), [\n\t\t{fName: 'Billy', lName: 'Bob', title: 'cowboy'}\n\t\t]\n\n\t)()\n"
  ]
}