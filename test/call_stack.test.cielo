# call_stack.test.cielo

import {UnitTester} from '@jdeighan/unit-tester'
import {
	undef, say, isString, isHash, isEmpty, nonEmpty, assert,
	} from '@jdeighan/coffee-utils'
import {oneIndent, arrow, clearIndent} from '@jdeighan/coffee-utils/arrow'
import {CallStack} from '@jdeighan/coffee-utils/stack'

twoIndents = oneIndent + oneIndent
threeIndents = oneIndent + oneIndent + oneIndent
simple = new UnitTester()

# ----------------------------------------------------------------------------

(() ->
	stack = new CallStack()
	simple.equal {{LINE}}, stack.getLevel(), 0

	stack.enter('func1', [], true)
	simple.equal {{LINE}}, stack.getLevel(), 1

	stack.enter('func2', [], true)
	simple.equal {{LINE}}, stack.getLevel(), 2

	stack.returnFrom('func2')
	simple.equal {{LINE}}, stack.getLevel(), 1

	stack.returnFrom('func1')
	simple.equal {{LINE}}, stack.getLevel(), 0

	stack.enter('func2', [], true)
	simple.equal {{LINE}}, stack.getLevel(), 1

	# ..........................................................

	stack.reset()
	simple.equal {{LINE}}, stack.getLevel(), 0

	stack.enter('func1', [], true)
	simple.equal {{LINE}}, stack.getLevel(), 1

	stack.enter('func2', [], false)
	simple.equal {{LINE}}, stack.getLevel(), 1

	stack.returnFrom('func2', [], false)
	simple.equal {{LINE}}, stack.getLevel(), 1

	stack.returnFrom('func1')
	simple.equal {{LINE}}, stack.getLevel(), 0
	)()

# ----------------------------------------------------------------------------
# --- test stack.curFunc()

(() ->
	stack = new CallStack()

	simple.equal {{LINE}}, stack.curFunc(), 'main'

	stack.enter('func1', [], true)
	simple.equal {{LINE}}, stack.curFunc(), 'func1'

	stack.enter('func2', [], true)
	simple.equal {{LINE}}, stack.curFunc(), 'func2'

	stack.returnFrom('func2')
	simple.equal {{LINE}}, stack.curFunc(), 'func1'

	stack.returnFrom('func1')
	simple.equal {{LINE}}, stack.curFunc(), 'main'

	stack.enter('func2', [], true)
	simple.equal {{LINE}}, stack.curFunc(), 'func2'
	)()

# ----------------------------------------------------------------------------
# --- test stack.curFunc() - it shouldn't matter if we are logging or not

(() ->
	stack = new CallStack()

	simple.equal {{LINE}}, stack.curFunc(), 'main'

	stack.enter('func1', [], false)
	simple.equal {{LINE}}, stack.curFunc(), 'func1'

	stack.enter('func2', [], true)
	simple.equal {{LINE}}, stack.curFunc(), 'func2'

	stack.returnFrom('func2')
	simple.equal {{LINE}}, stack.curFunc(), 'func1'

	stack.returnFrom('func1')
	simple.equal {{LINE}}, stack.curFunc(), 'main'

	stack.enter('func2', [], false)
	simple.equal {{LINE}}, stack.curFunc(), 'func2'
	)()

# ----------------------------------------------------------------------------
# --- test stack.isActive()

(() ->
	stack = new CallStack()

	simple.falsy {{LINE}}, stack.isActive('func1')
	simple.falsy {{LINE}}, stack.isActive('func2')

	stack.enter('func1', [], true)
	simple.truthy {{LINE}}, stack.isActive('func1')
	simple.falsy {{LINE}}, stack.isActive('func2')

	stack.enter('func2', [], true)
	simple.truthy {{LINE}}, stack.isActive('func1')
	simple.truthy {{LINE}}, stack.isActive('func2')

	stack.returnFrom('func2')
	simple.truthy {{LINE}}, stack.isActive('func1')
	simple.falsy {{LINE}}, stack.isActive('func2')

	stack.returnFrom('func1')
	simple.falsy {{LINE}}, stack.isActive('func1')
	simple.falsy {{LINE}}, stack.isActive('func2')

	stack.enter('func2', [], true)
	simple.falsy {{LINE}}, stack.isActive('func1')
	simple.truthy {{LINE}}, stack.isActive('func2')

	)()

# ----------------------------------------------------------------------------
# --- test stack.isActive() - it shouldn't matter if we are logging or not

(() ->
	stack = new CallStack()

	simple.falsy {{LINE}}, stack.isActive('func1')
	simple.falsy {{LINE}}, stack.isActive('func2')

	stack.enter('func1', [], false)
	simple.truthy {{LINE}}, stack.isActive('func1')
	simple.falsy {{LINE}}, stack.isActive('func2')

	stack.enter('func2', [], true)
	simple.truthy {{LINE}}, stack.isActive('func1')
	simple.truthy {{LINE}}, stack.isActive('func2')

	stack.returnFrom('func2')
	simple.truthy {{LINE}}, stack.isActive('func1')
	simple.falsy {{LINE}}, stack.isActive('func2')

	stack.returnFrom('func1')
	simple.falsy {{LINE}}, stack.isActive('func1')
	simple.falsy {{LINE}}, stack.isActive('func2')

	stack.enter('func2', [], false)
	simple.falsy {{LINE}}, stack.isActive('func1')
	simple.truthy {{LINE}}, stack.isActive('func2')
	)()

# ----------------------------------------------------------------------------
# --- test dump()

(() ->
	stack = new CallStack()

	stack.enter 'func1', [1, 'a'], false
	stack.enter 'func2', [], false
	stack.enter 'func3', [[1,2,3], {why: 'not'}], false

	simple.same {{LINE}}, stack.dump(), """
			CALL STACK:
			0: func1 1 'a'
			1: func2
			2: func3 [1,2,3] {"why":"not"}
			"""
	)()
