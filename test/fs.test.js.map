{
  "version": 3,
  "file": "fs.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\fs.test.coffee"
  ],
  "names": [],
  "mappings": ";AAAgB;AAAA,IAAA,QAAA,EAAA,WAAA,EAAA,YAAA,EAAA,YAAA,EAAA,MAAA,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA;;AAEhB,OAAA;EAAQ,OAAR;EAAiB,OAAjB;CAAA,MAAA;;AACA,OAAA;EAAQ,aAAR;CAAA,MAAA;;AAEA,OAAA;EAAQ,KAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,GAAR;EAAa,QAAb;EAAuB,SAAvB;CAAA,MAAA;;AACA,OAAA;EAAQ,KAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,SAAR;CAAA,MAAA;;AACA,OAAA;;EAEC,KAFD;EAEQ,MAFR;EAEgB,MAFhB;EAEwB,KAFxB;EAE+B,KAF/B;EAEsC,KAFtC;EAE6C,MAF7C;EAGC,iBAHD;EAGoB,IAHpB;EAG0B,QAH1B;EAGoC,KAHpC;EAG2C,SAH3C;EAKC,MALD;EAKS,UALT;EAKqB,gBALrB;EAMC,UAND;EAMa,MANb;EAMqB,WANrB;EAMkC,SANlC;EAM6C,QAN7C;EAMuD,OANvD;EAOC,OAPD;EAOU,QAPV;EAOoB,WAPpB;EAQC,YARD;EAQe,kBARf;EASC,OATD;EASU,OATV;EAUC,SAVD;EAUY,OAVZ;CAAA,MAAA;;AAaA,OAAA,GAAU,QAAA,CAAS,MAAO,CAAA,IAAI,CAAC,GAArB;;AACV,MAAA,GAAS,KAAA,CAAM,MAAO,CAAA,IAAI,CAAC,GAAlB;;AACT,MAAA,CAAO,KAAA,CAAM,MAAN,CAAP;;AAEA,QAAA,GAAW;;AACX,OAAA,GAAU,MAAA,CAAO,MAAP,EAAe,QAAf;;AAEV,OAAA,GAAU,KAAA,CAAM,eAAN,EA/BM;;;AAmChB,CAAC,QAAA,CAAA,CAAA;EACA,KAAK,CAAC,KAAN,CAAY,MAAZ,EAAoB,MAAA,CAAO,OAAP,EAAgB,MAAhB,CAApB;EACA,KAAK,CAAC,KAAN,CAAY,MAAA,CAAO,MAAO,CAAA,IAAI,CAAC,GAAnB,CAAZ,EAAqC,YAArC;EACA,KAAK,CAAC,KAAN,CAAY,UAAA,CAAW,MAAO,CAAA,IAAI,CAAC,GAAvB,CAAZ,EAA0C,MAAA,CAAO,OAAP,EAAgB,MAAhB,EAAwB,YAAxB,CAA1C;EAEA,KAAK,CAAC,KAAN,CAAY,OAAA,CAAQ,SAAR,EAAmB,QAAnB,CAAZ,EAA0C,aAA1C;EACA,KAAK,CAAC,KAAN,CAAY,OAAA,CAAQ,SAAR,EAAmB,SAAnB,CAAZ,EAA2C,aAA3C;EAEA,KAAK,CAAC,KAAN,CAAY,OAAA,CAAQ,cAAR,EAAwB,QAAxB,CAAZ,EAA+C,kBAA/C;SACA,KAAK,CAAC,KAAN,CAAY,OAAA,CAAQ,cAAR,EAAwB,SAAxB,CAAZ,EAAgD,kBAAhD;AATA,CAAD,CAAA,CAAA,EAnCgB;;;AAiDhB,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,KAAA,EAAA,IAAA,EAAA;EAAC,KAAA,GAAQ;EAER,KAAK,CAAC,MAAN,CAAa,MAAA,CAAO,CAAA,CAAA,CAAG,MAAH,CAAA,CAAA,CAAA,CAAa,KAAb,CAAA,CAAP,CAAb;EACA,KAAK,CAAC,KAAN,CAAa,MAAA,CAAO,CAAA,CAAA,CAAG,MAAH,CAAA,uBAAA,CAAP,CAAb;EAEA,KAAK,CAAC,KAAN,CAAa,MAAA,CAAO,CAAA,CAAA,CAAG,KAAH,CAAA,CAAP,EAAmB,MAAnB,CAAb,EAAyC,MAAA,CAAO,MAAP,EAAe,KAAf,CAAzC;EACA,KAAK,CAAC,KAAN,CAAa,MAAA,CAAO,YAAP,EAAqB,MAArB,CAAb,EAA2C,MAAA,CAAO,MAAP,EAAe,YAAf,CAA3C;EACA,KAAK,CAAC,KAAN,CAAa,MAAA,CAAO,UAAP,EAAmB,MAAnB,CAAb,EAAyC,MAAA,CAAO,MAAP,EAAe,cAAf,EAA+B,UAA/B,CAAzC;EACA,KAAK,CAAC,KAAN,CAAa,MAAA,CAAO,aAAP,EAAsB,MAAtB,CAAb,EAA4C,MAAA,CAAO,MAAP,EAAe,cAAf,EAA+B,QAA/B,EAAyC,aAAzC,CAA5C;EAEA,IAAA,GAAO;IAAC,QAAA,EAAU;EAAX;EACP,KAAK,CAAC,KAAN,CAAa,MAAA,CAAO,CAAA,CAAA,CAAG,KAAH,CAAA,CAAP,EAAmB,MAAnB,EAA2B,IAA3B,CAAb,EAA+C,CAAA,EAAA,CAAA,CAAK,KAAL,CAAA,CAA/C;EACA,KAAK,CAAC,KAAN,CAAa,MAAA,CAAO,YAAP,EAAqB,MAArB,EAA6B,IAA7B,CAAb,EAAiD,cAAjD;EACA,KAAK,CAAC,KAAN,CAAa,MAAA,CAAO,UAAP,EAAmB,MAAnB,EAA2B,IAA3B,CAAb,EAA+C,yBAA/C;EACA,KAAK,CAAC,KAAN,CAAa,MAAA,CAAO,aAAP,EAAsB,MAAtB,EAA8B,IAA9B,CAAb,EAAkD,mCAAlD;EAEA,KAAA,GAAQ;IAAC,QAAA,EAAU,IAAX;IAAiB,SAAA,EAAW;EAA5B;EACR,KAAK,CAAC,KAAN,CAAa,MAAA,CAAO,cAAP,EAAuB,MAAvB,EAA+B,KAA/B,CAAb,EAAoD,iBAApD;SACA,KAAK,CAAC,KAAN,CAAa,MAAA,CAAO,SAAP,EAAkB,MAAlB,EAA0B,KAA1B,CAAb,EAA+C,eAA/C;AAnBA,CAAD,CAAA,CAAA,EAjDgB;;;;;AA0EhB,KAAK,CAAC,IAAN,CAAW,UAAA,CAAW,MAAX,CAAX,EAA+B,CAAC,MAAD,EAAQ,UAAR,EAAmB,WAAnB,EAA+B,cAA/B,CAA/B;;AAEA,KAAK,CAAC,KAAN,CAAY,MAAA,CAAO,UAAP,EAAmB,MAAnB,CAAZ,EACE,CAAA,CAAA,CAAG,MAAH,CAAA,sBAAA,CADF,EA5EgB;;;AAiFhB,KAAK,CAAC,KAAN,CAAY,MAAA,CAAO,UAAP,EAAmB,OAAnB,CAAZ,EAAyC,kBAAzC;;AACA,KAAK,CAAC,KAAN,CAAY,MAAA,CAAO,EAAP,EAAW,UAAX,EAAuB,OAAvB,CAAZ,EAA6C,kBAA7C;;AACA,KAAK,CAAC,KAAN,CAAY,MAAA,CAAO,KAAP,EAAc,YAAd,CAAZ,EAAyC,eAAzC;;AACA,KAAK,CAAC,KAAN,CAAY,MAAA,CAAO,MAAP,EAAe,KAAf,EAAsB,OAAtB,EAA+B,OAA/B,CAAZ,EACE,wBADF;;AAGA,KAAK,CAAC,KAAN,CAAY,MAAA,CAAO,YAAP,EAAqB,OAArB,CAAZ,EAA2C,kBAA3C;;AACA,KAAK,CAAC,KAAN,CAAY,MAAA,CAAO,MAAP,EAAe,aAAf,CAAZ,EAA2C,eAA3C;;AACA,KAAK,CAAC,KAAN,CAAY,MAAA,CAAO,OAAP,EAAgB,KAAhB,EAAuB,OAAvB,EAAgC,OAAhC,CAAZ,EACE,wBADF;;AAGA,KAAK,CAAC,KAAN,CAAY,MAAA,CAAO,kBAAP,EAA2B,OAA3B,CAAZ,EAAiD,sBAAjD,EA5FgB;;;;;;AAkGhB,EAAA,GAAK,MAAA,CAAO,OAAO,CAAC,GAAR,CAAA,CAAP;;AAEL,OAAA,GAAU,MAAA,CAAO,OAAA,CAAQ,MAAR,EAAgB,IAAhB,CAAP;;AACV,MAAA,CAAO,OAAA,KAAW,EAAlB,EAAsB,CAAA,CAAA,CAAG,OAAH,CAAA,cAAA,CAAA,CAA2B,EAA3B,CAAA,CAAtB;;AAEA,GAAA,CAAI,CAAA,6BAAA,CAAA,CAAgC,EAAhC,CAAA,CAAA,CAAJ;;AACA,GAAA,CAAI,CAAA,UAAA,CAAA,CAAa,MAAb,CAAA,CAAA,CAAJ;;AACA,GAAA,CAAI,CAAA,YAAA,CAAA,CAAe,QAAf,CAAA,CAAA,CAAJ;;AACA,GAAA,CAAI,CAAA,WAAA,CAAA,CAAc,OAAd,CAAA,CAAA,CAAJ;;AACA,GAAA,CAAI,CAAA,WAAA,CAAA,CAAc,OAAd,CAAA,CAAA,CAAJ,EA3GgB;;;AA8GhB,KAAK,CAAC,KAAN,CAAY,WAAA,CAAY,OAAZ,CAAZ,EAAkC,OAAlC,EA9GgB;;;AAiHhB,KAAK,CAAC,KAAN,CAAY,WAAA,CAAY,QAAZ,CAAZ,EAAmC,MAAA,CAAO,OAAP,EAAgB,QAAhB,CAAnC,EAjHgB;;;AAoHhB,KAAK,CAAC,KAAN,CAAY,WAAA,CAAY,CAAA,EAAA,CAAA,CAAK,QAAL,CAAA,CAAZ,CAAZ,EAA0C,MAAA,CAAO,OAAP,EAAgB,QAAhB,CAA1C,EApHgB;;;AAuHhB,KAAK,CAAC,KAAN,CAAY,WAAA,CAAY,CAAA,UAAA,CAAA,CAAa,QAAb,CAAA,CAAZ,CAAZ,EAAkD,MAAA,CAAO,OAAP,EAAgB,QAAhB,CAAlD;;AAEA,WAAA,GAAc,SAAA,CAAU,MAAO,CAAA,IAAI,CAAC,GAAtB;;AACd,KAAK,CAAC,IAAN,CAAW,WAAX,EAAwB;EACvB,GAAA,EAAK,MADkB;EAEvB,QAAA,EAAU,QAFa;EAGvB,QAAA,EAAU,OAHa;EAIvB,IAAA,EAAM,QAAA,CAAS,QAAT,CAJiB;EAKvB,GAAA,EAAK,OAAA,CAAQ,QAAR;AALkB,CAAxB;;AAQA,YAAA,GAAe,SAAA,CAAU,OAAV,EAlIC;;AAmIhB,KAAK,CAAC,IAAN,CAAW,YAAX,EAAyB;EACxB,GAAA,EAAK,MADmB;EAExB,QAAA,EAAU,QAFc;EAGxB,QAAA,EAAU,OAHc;EAIxB,IAAA,EAAM,QAAA,CAAS,QAAT,CAJkB;EAKxB,GAAA,EAAK,OAAA,CAAQ,QAAR;AALmB,CAAzB;;AAQA,YAAA,GAAe,SAAA,CAAU,MAAV,EA3IC;;AA4IhB,KAAK,CAAC,IAAN,CAAW,YAAX,EAAyB;EACxB,GAAA,EAAK,SAAA,CAAU,MAAV,CADmB;EAExB,IAAA,EAAM;AAFkB,CAAzB;;AAKA,KAAK,CAAC,KAAN,CAAY,SAAA,CAAU,OAAV,CAAZ,EAAgC;EAC/B,IAAA,EAAM,MADyB;EAE/B,IAAA,EAAM,KAFyB;EAG/B,GAAA,EAAK,MAH0B;EAI/B,QAAA,EAAU,OAJqB;EAK/B,IAAA,EAAM,OALyB;EAM/B,QAAA,EAAU,QANqB;EAO/B,IAAA,EAAM,QAPyB;EAQ/B,IAAA,EAAM,QAAA,CAAS,QAAT,CARyB;EAS/B,IAAA,EAAM,QAAA,CAAS,QAAT,CATyB;EAU/B,OAAA,EAAS,MAVsB;EAW/B,GAAA,EAAK;AAX0B,CAAhC;;AAcA,IAAG,OAAO,CAAC,QAAR,KAAoB,OAAvB;EACC,KAAK,CAAC,MAAN,CAAa,KAAA,CAAM,UAAN,CAAb;EACA,KAAK,CAAC,MAAN,CAAa,KAAA,CAAM,kBAAN,CAAb;EACA,KAAK,CAAC,KAAN,CAAa,MAAA,CAAO,UAAP,CAAb;EACA,KAAK,CAAC,KAAN,CAAa,MAAA,CAAO,kBAAP,CAAb;EAEA,KAAK,CAAC,KAAN,CAAa,KAAA,CAAM,wBAAN,CAAb;EACA,KAAK,CAAC,KAAN,CAAa,KAAA,CACZ,oDADY,CAAb;EAGA,KAAK,CAAC,MAAN,CAAa,MAAA,CAAO,wBAAP,CAAb;EACA,KAAK,CAAC,MAAN,CAAa,MAAA,CACZ,oDADY,CAAb;EAIA,KAAK,CAAC,MAAN,CAAa,gBAAA,CAAiB,aAAjB,CAAb;EACA,KAAK,CAAC,KAAN,CAAa,gBAAA,CACZ,oDADY,CAAb,EAhBD;;;AAoBA,KAAK,CAAC,KAAN,CAAY,OAAA,CAAQ,UAAR,CAAZ,EAAiC,MAAjC;;AACA,KAAK,CAAC,KAAN,CAAY,OAAA,CAAQ,OAAR,CAAZ,EAA8B,EAA9B;;AACA,KAAK,CAAC,KAAN,CAAY,OAAA,CAAQ,SAAR,CAAZ,EAAgC,KAAhC;;AACA,KAAK,CAAC,KAAN,CAAY,OAAA,CAAQ,WAAR,CAAZ,EAAkC,OAAlC;;AAEA,QAAA,GAAW,MAAA,CAAO,cAAP,EAAuB,MAAvB;;AACX,KAAK,CAAC,KAAN,CAAY,QAAZ,EAAsB,+CAAtB,EAzLgB;;;;;;;;;;AAqMhB,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,QAAA,EAAA;EAAC,MAAA,GAAS;EAET,QAAA,GAAW,CAAC,IAAD,CAAA,GAAA;IACV,IAAG,CAAE,IAAI,CAAC,KAAL,CAAW,cAAX,CAAL;MACC,MAAM,CAAC,IAAP,CAAY,IAAZ,EADD;;AAEA,WAAO;EAHG;EAKX,QAAA,GAAW;EACX,iBAAA,CAAkB,QAAlB,EAA4B,QAA5B;SAEA,KAAK,CAAC,KAAN,CAAY,MAAZ,EAAoB,CACnB,KADmB,EAEnB,KAFmB,EAGnB,KAHmB,EAInB,KAJmB,CAApB;AAXA,CAAD,CAAA,CAAA,EArMgB;;;;AA2NhB,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,QAAA,EAAA;EAAC,OAAA,GAAU;EAEV,QAAA,GAAW,QAAA,CAAC,KAAD,CAAA;IACV,OAAO,CAAC,IAAR,CAAa,KAAb;AACA,WAAO;EAFG;EAIX,QAAA,GAAW;EACX,YAAA,CAAa,QAAb,EAAuB,QAAvB;SAEA,KAAK,CAAC,KAAN,CAAY,OAAZ,EAAqB,CACpB,UADoB,EAEpB,eAFoB,EAGpB,oBAHoB,CAArB;AAVA,CAAD,CAAA,CAAA,EA3NgB;;;AA8OhB,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,QAAA,EAAA;EAAC,QAAA,GAAW,MAAA,CAAO,OAAP,EAAgB,gBAAhB;EACX,YAAA,GAAe;EACf,QAAA,GAAW,QAAA,CAAC,OAAD,CAAA;IACV,YAAA,GAAe;AACf,WAAO,KAFG;EAAA;EAIX,kBAAA,CAAmB,QAAnB,EAA6B,QAA7B;SACA,KAAK,CAAC,KAAN,CAAY,YAAZ,EAA0B,CAAC,KAAD,EAAQ,GAAR,CAA1B;AARA,CAAD,CAAA,CAAA,EA9OgB;;;AA2PhB,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,QAAA,EAAA;EAAC,QAAA,GAAW,MAAA,CAAO,OAAP,EAAgB,gBAAhB;EACX,aAAA,GAAgB;EAChB,QAAA,GAAW,QAAA,CAAC,OAAD,CAAA;IACV,aAAa,CAAC,IAAd,CAAmB,OAAnB;EADU;EAIX,kBAAA,CAAmB,QAAnB,EAA6B,QAA7B;SACA,KAAK,CAAC,KAAN,CAAY,aAAZ,EAA2B,CACzB,CAAC,KAAD,EAAQ,GAAR,CADyB,EAEzB,CAAC,wEAAD,EAA2E,cAA3E,CAFyB,CAA3B;AARA,CAAD,CAAA,CAAA,EA3PgB;;;;;;AA8QhB,CAAC,MAAA,QAAA,CAAA,CAAA;AACD,MAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,WAAA,EAAA,QAAA,EAAA;EAAC,IAAA,GAAO,OAAA,CAAA;EACP,IAAI,IAAA,KAAQ,gBAAZ;IACC,KAAK,CAAC,KAAN,CAAY,MAAZ,EAAoB,kCAApB,EADD;GADD;;;;EAOC,KAAA,GAAQ,MAAA,CAAO,MAAP,EAAe,SAAf;EACR,IAAA,CAAK,CAAA;GAAA,CAAL,EAGM,MAHN,EAGc,SAHd;EAIA,KAAK,CAAC,MAAN,CAAa,MAAA,CAAO,KAAP,CAAb,EAZD;;EAeC,MAAM,OAAA,CAAQ,KAAR,EAAe,CAAC,QAAD,CAAA,GAAA;AACtB,QAAA;IAAE,WAAA,GAAc,QAAQ,CAAC,OAAT,CAAiB,KAAjB,EAAwB,KAAxB;AACd,WAAO;EAFa,CAAf;EAIN,KAAK,CAAC,MAAN,CAAa,MAAA,CAAO,KAAP,CAAb;EACA,KAAK,CAAC,KAAN,CAAY,KAAA,CAAM,KAAN,CAAZ,EAA0B,YAA1B;EACA,MAAM,MAAA,CAAO,KAAP;EACN,KAAK,CAAC,KAAN,CAAY,MAAA,CAAO,KAAP,CAAZ,EAtBD;;EAyBC,MAAA,GAAS,MAAA,CAAO,MAAP,EAAe,WAAf;EACT,KAAA,CAAM,MAAN;EACA,KAAK,CAAC,MAAN,CAAa,KAAA,CAAM,MAAN,CAAb,EA3BD;;EA8BC,QAAA,GAAW,MAAA,CAAO,MAAP,EAAe,UAAf;EACX,IAAA,CAAK,kBAAL,EAAyB,KAAzB;EACA,KAAK,CAAC,MAAN,CAAa,MAAA,CAAO,QAAP,CAAb;EACA,OAAA,CAAQ,QAAR,EAAkB,CAAC,QAAD,CAAA,GAAA;WACjB,QAAQ,CAAC,OAAT,CAAiB,MAAjB,EAAyB,UAAzB;EADiB,CAAlB;EAEA,KAAK,CAAC,MAAN,CAAa,MAAA,CAAO,QAAP,CAAb;EACA,KAAK,CAAC,KAAN,CAAY,KAAA,CAAM,QAAN,CAAZ,EAA6B,sBAA7B;EACA,MAAM,MAAA,CAAO,QAAP;EACN,KAAK,CAAC,KAAN,CAAY,MAAA,CAAO,QAAP,CAAZ,EAtCD;;EAyCC,WAAA,GAAc,MAAA,CAAO,MAAP,EAAe,cAAf;EACd,KAAA,GAAQ;IACP,MAAA,EAAQ,cADD;IAEP,OAAA,EAAS;EAFF;EAIR,QAAA,CAAS,KAAT,EAAgB,WAAhB;EACA,KAAK,CAAC,MAAN,CAAa,MAAA,CAAO,WAAP,CAAb;EACA,KAAK,CAAC,KAAN,CAAY,SAAA,CAAU,WAAV,CAAZ,EAAoC;IACnC,MAAA,EAAQ,cAD2B;IAEnC,OAAA,EAAS;EAF0B,CAApC;EAIA,OAAA,CAAQ,WAAR,EAAqB,CAAC,KAAD,CAAA,GAAA;IACpB,KAAK,CAAC,MAAN,GAAe;WACf,KAAK,CAAC,IAAN,GAAa;EAFO,CAArB;EAGA,KAAK,CAAC,KAAN,CAAY,SAAA,CAAU,WAAV,CAAZ,EAAoC;IACnC,MAAA,EAAQ,WAD2B;IAEnC,OAAA,EAAS,KAF0B;IAGnC,IAAA,EAAM;EAH6B,CAApC;EAKA,KAAK,CAAC,MAAN,CAAa,MAAA,CAAO,WAAP,CAAb;EACA,MAAM,MAAA,CAAO,WAAP;EACN,KAAK,CAAC,KAAN,CAAY,MAAA,CAAO,WAAP,CAAZ,EA9DD;;EAkEC,KAAA,CAAM,MAAN;SACA,KAAK,CAAC,KAAN,CAAY,KAAA,CAAM,MAAN,CAAZ;AApEA,CAAD,CAAA,CAAA,EA9QgB;;;;AAwVhB,CAAC,QAAA,CAAA,CAAA;AACD,MAAA,QAAA,EAAA,MAAA,EAAA,UAAA,EAAA,UAAA,EAAA;EAAC,MAAA,GAAS,MAAA,CAAO,OAAP,EAAgB,cAAhB;EAET,UAAA,GAAa,CAAA;EACb,UAAA,GAAa;EAEb,QAAA,GAAW,CAAC,QAAD,EAAW,GAAX,EAAgB,KAAhB,CAAA,GAAA;IACV,UAAA,IAAc;EADJ;EAIX,MAAA,GAAS,CAAC,QAAD,EAAW,GAAX,EAAgB,KAAhB,CAAA,GAAA;AACV,QAAA;IAAE,GAAA,GAAM,OAAA,CAAQ,QAAR;IACN,IAAG,UAAU,CAAC,cAAX,CAA0B,GAA1B,CAAH;MACC,UAAU,CAAC,GAAD,CAAV,IAAmB,EADpB;KAAA,MAAA;MAGC,UAAU,CAAC,GAAD,CAAV,GAAkB,EAHnB;;AAIA,WAAQ,GAAA,KAAO;EANP;EAQT,WAAA,CAAY,MAAZ,EAAoB,QAApB,EAA8B,MAA9B;EAEA,KAAK,CAAC,KAAN,CAAY,UAAZ,EAAwB,CAAxB;SACA,KAAK,CAAC,KAAN,CAAY,UAAZ,EAAwB;IACvB,MAAA,EAAQ,CADe;IAEvB,MAAA,EAAQ,CAFe;IAGvB,KAAA,EAAO;EAHgB,CAAxB;AArBA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# fs.test.coffee\n\nimport {dirname, resolve} from 'path'\nimport {fileURLToPath} from 'url'\n\nimport {undef} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG} from '@jdeighan/base-utils/log'\nimport {dbg, dbgEnter, dbgReturn} from '@jdeighan/base-utils/debug'\nimport {utest} from '@jdeighan/base-utils/utest'\nimport {parentDir} from '@jdeighan/base-utils/fs'\nimport {\n\t# --- Re-exports, originally from @jdeighan/base-utils/fs\n\tmydir, mkpath, isFile, isDir, mkDir, rmDir, rmFile,\n\tforEachLineInFile, barf, barfJSON, slurp, slurpJSON,\n\n\tmyfile, myfullpath, isSimpleFileName,\n\tgetSubDirs, pathTo, getFullPath, parsePath, fileStub, fileExt,\n\twithExt, projRoot, forEachFile,\n\tforEachBlock, forEachSetOfBlocks,\n\tfixFile, fixJSON,\n\tcloneRepo, homeDir,\n\t} from '@jdeighan/coffee-utils/fs'\n\nprojDir = projRoot(import.meta.url)\nmy_dir = mydir(import.meta.url)\nassert isDir(my_dir)\n\nmy_fname = 'fs.test.js'\nmy_path = mkpath(my_dir, my_fname)\n\ntestDir = mydir(`import.meta.url`)\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tutest.equal my_dir, mkpath(projDir, 'test')\n\tutest.equal myfile(import.meta.url), 'fs.test.js'\n\tutest.equal myfullpath(import.meta.url),  mkpath(projDir, 'test', 'fs.test.js')\n\n\tutest.equal withExt('file.py', 'svelte'), 'file.svelte'\n\tutest.equal withExt('file.py', '.svelte'), 'file.svelte'\n\n\tutest.equal withExt('/bin/file.py', 'svelte'), '/bin/file.svelte'\n\tutest.equal withExt('/bin/file.py', '.svelte'), '/bin/file.svelte'\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tfname = 'block.test.coffee'\n\n\tutest.truthy isFile(\"#{my_dir}/#{fname}\")\n\tutest.falsy  isFile(\"#{my_dir}/nosuchfile.test.coffee\")\n\n\tutest.equal  pathTo(\"#{fname}\", my_dir), mkpath(my_dir, fname)\n\tutest.equal  pathTo('myfile.txt', my_dir), mkpath(my_dir, 'myfile.txt')\n\tutest.equal  pathTo('test.txt', my_dir), mkpath(my_dir, 'subdirectory', 'test.txt')\n\tutest.equal  pathTo('myfile2.txt', my_dir), mkpath(my_dir, 'subdirectory', 'subdir', 'myfile2.txt')\n\n\thOpt = {relative: true}\n\tutest.equal  pathTo(\"#{fname}\", my_dir, hOpt), \"./#{fname}\"\n\tutest.equal  pathTo('myfile.txt', my_dir, hOpt), \"./myfile.txt\"\n\tutest.equal  pathTo('test.txt', my_dir, hOpt), \"./subdirectory/test.txt\"\n\tutest.equal  pathTo('myfile2.txt', my_dir, hOpt), \"./subdirectory/subdir/myfile2.txt\"\n\n\thOpt2 = {relative: true, direction: 'up'}\n\tutest.equal  pathTo('package.json', my_dir, hOpt2), \"../package.json\"\n\tutest.equal  pathTo('.bashrc', my_dir, hOpt2), \"../../.bashrc\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n# --- dirs are returned in alphabetical order\nutest.like getSubDirs(my_dir), ['data','markdown','new-tests','subdirectory']\n\nutest.equal pathTo('test.txt', my_dir), \\\n\t\t\"#{my_dir}/subdirectory/test.txt\"\n\n# ---------------------------------------------------------------------------\n\nutest.equal mkpath('/usr/lib', 'johnd'), 'c:/usr/lib/johnd'\nutest.equal mkpath('', '/usr/lib', 'johnd'), 'c:/usr/lib/johnd'\nutest.equal mkpath(\"c:/\", 'local/user'), 'c:/local/user'\nutest.equal mkpath('/usr', 'lib', 'local', 'johnd'),\n\t\t'c:/usr/lib/local/johnd'\n\nutest.equal mkpath('\\\\usr\\\\lib', 'johnd'), 'c:/usr/lib/johnd'\nutest.equal mkpath(\"c:\\\\\", 'local\\\\user'), 'c:/local/user'\nutest.equal mkpath('\\\\usr', 'lib', 'local', 'johnd'),\n\t\t'c:/usr/lib/local/johnd'\n\nutest.equal mkpath('C:\\\\Users\\\\johnd', 'cielo'), 'c:/Users/johnd/cielo'\n\n# ---------------------------------------------------------------------------\n# test getFullPath()\n\n# --- current working directory is the root dir, i.e. parent of this directory\nwd = mkpath(process.cwd())\n\nrootdir = mkpath(resolve(my_dir, '..'))\nassert rootdir == wd, \"#{rootdir} should equal #{wd}\"\n\ndbg \"Current Working Directory = '#{wd}'\"\ndbg \"my_dir = '#{my_dir}'\"\ndbg \"my_fname = '#{my_fname}'\"\ndbg \"my_path = '#{my_path}'\"\ndbg \"rootdir = '#{rootdir}'\"\n\n# --- given a full path, only change \\ to /\nutest.equal getFullPath(my_path), my_path\n\n# --- given a utest file name, prepend the current working directory\nutest.equal getFullPath(my_fname), mkpath(rootdir, my_fname)\n\n# --- leading . should be resolved\nutest.equal getFullPath(\"./#{my_fname}\"), mkpath(rootdir, my_fname)\n\n# --- leading .. should be resolved\nutest.equal getFullPath(\"./test/../#{my_fname}\"), mkpath(rootdir, my_fname)\n\nhSourceInfo = parsePath(import.meta.url)\nutest.like hSourceInfo, {\n\tdir: my_dir\n\tfileName: my_fname\n\tfilePath: my_path\n\tstub: fileStub(my_fname)\n\text: fileExt(my_fname)\n\t}\n\nhSourceInfo2 = parsePath(my_path)    # should be the same\nutest.like hSourceInfo2, {\n\tdir: my_dir\n\tfileName: my_fname\n\tfilePath: my_path\n\tstub: fileStub(my_fname)\n\text: fileExt(my_fname)\n\t}\n\nhSourceInfo3 = parsePath(my_dir)     # should know that it's a directory\nutest.like hSourceInfo3, {\n\tdir: parentDir(my_dir)\n\troot: \"c:/\"\n\t}\n\nutest.equal parsePath(my_path), {\n\ttype: 'file'\n\troot: 'c:/'\n\tdir: my_dir\n\tfilePath: my_path\n\tpath: my_path\n\tfileName: my_fname\n\tbase: my_fname\n\tstub: fileStub(my_fname)\n\tname: fileStub(my_fname)\n\tpurpose: 'test'\n\text: '.js'\n\t}\n\nif process.platform == 'win32'\n\tutest.truthy isDir('c:/Users')\n\tutest.truthy isDir('c:/Program Files')\n\tutest.falsy  isFile('c:/Users')\n\tutest.falsy  isFile('c:/Program Files')\n\n\tutest.falsy  isDir('c:/Windows/notepad.exe')\n\tutest.falsy  isDir(\n\t\t'c:/Program Files/Windows Media Player/wmplayer.exe'\n\t\t)\n\tutest.truthy isFile('c:/Windows/notepad.exe')\n\tutest.truthy isFile(\n\t\t'c:/Program Files/Windows Media Player/wmplayer.exe'\n\t\t)\n\n\tutest.truthy isSimpleFileName('notepad.exe')\n\tutest.falsy  isSimpleFileName(\n\t\t'c:/Program Files/Windows Media Player/wmplayer.exe'\n\t\t)\n\nutest.equal fileExt('file.txt'), '.txt'\nutest.equal fileExt('file.'), ''\nutest.equal fileExt('file.99'), '.99'\nutest.equal fileExt('file._txt'), '._txt'\n\nfilepath = pathTo('readline.txt', my_dir)\nutest.equal filepath, \"c:/Users/johnd/coffee-utils/test/readline.txt\"\n\n# ---------------------------------------------------------------------------\n# --- test forEachLineInFile()\n#     Contents of file2.txt:\n#     # --- this is a comment\n#     abc\n#     def\n#     ghi\n#     jkl\n\n\n(() ->\n\tlLines = []\n\n\tcallback = (line) =>\n\t\tif ! line.match(/^\\s*\\#(\\s|$)/)\n\t\t\tlLines.push line\n\t\treturn false\n\n\tfilepath = \"c:/Users/johnd/coffee-utils/test/data/file2.txt\"\n\tforEachLineInFile filepath, callback\n\n\tutest.equal lLines, [\n\t\t\"abc\",\n\t\t\"def\",\n\t\t\"ghi\",\n\t\t\"jkl\",\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n# test forEachBlock()\n\n(() ->\n\tlBlocks = []\n\n\tcallback = (block) ->\n\t\tlBlocks.push block\n\t\treturn false\n\n\tfilepath = \"c:/Users/johnd/coffee-utils/test/data/file3.txt\"\n\tforEachBlock filepath, callback\n\n\tutest.equal lBlocks, [\n\t\t\"abc\\ndef\",\n\t\t\"abc\\ndef\\nghi\",\n\t\t\"abc\\ndef\\nghi\\njkl\",\n\t\t]\n\t)()\n\n# ----------------------------------------------------------------------------\n\n(() ->\n\tfilepath = mkpath(testDir, 'code2.test.txt')\n\tlFirstBlocks = undef\n\tcallback = (lBlocks) ->\n\t\tlFirstBlocks = lBlocks\n\t\treturn true   # we're only interested in the first set\n\n\tforEachSetOfBlocks filepath, callback\n\tutest.equal lFirstBlocks, [\"f()\", \"f\"]\n\t)()\n\n# ----------------------------------------------------------------------------\n\n(() ->\n\tfilepath = mkpath(testDir, 'code2.test.txt')\n\tlAllBlockSets = []\n\tcallback = (lBlocks) ->\n\t\tlAllBlockSets.push(lBlocks)\n\t\treturn\n\n\tforEachSetOfBlocks filepath, callback\n\tutest.equal lAllBlockSets, [\n\t\t\t[\"f()\", \"f\"],\n\t\t\t[\"f = (key=undef) ->\\n\\tswitch key\\n\\t\\twhen 'ok'\\n\\t\\t\\tsay 'all is OK'\", \"f,say,mkpath\"],\n\t\t\t]\n\t)()\n\n# ----------------------------------------------------------------------------\n# --- Test new functions:\n#\tmkDir, rmDir, rmFile, fixFile, fixJSON,\n#\tcloneRepo, homeDir,\n\n(() ->\n\thome = homeDir()\n\tif (home == 'c:/Users/johnd')\n\t\tutest.equal my_dir, 'c:/Users/johnd/coffee-utils/test'\n\n\t# --- Create new directories and files\n\n\t# --- Create 'xxx.txt' in this test folder, modify, delete\n\txFile = mkpath(my_dir, 'xxx.txt')\n\tbarf \"\"\"\n\t\txxx\n\t\tyyy\n\t\t\"\"\", my_dir, 'xxx.txt'\n\tutest.truthy isFile(xFile)\n\n\t# --- fixFile() is async\n\tawait fixFile xFile, (contents) =>\n\t\tnewContents = contents.replace('yyy', 'zzz')\n\t\treturn newContents\n\n\tutest.truthy isFile(xFile)\n\tutest.equal slurp(xFile), \"xxx\\nzzz\\n\"\n\tawait rmFile xFile\n\tutest.falsy isFile(xFile)\n\n\t# --- Create new subdirectory 'new-tests'\n\tnewDir = mkpath(my_dir, 'new-tests')\n\tmkDir newDir\n\tutest.truthy isDir(newDir)\n\n\t# --- Create file test.txt, modify, delete\n\ttestFile = mkpath(newDir, 'test.txt')\n\tbarf \"this is a test\\n\", xFile\n\tutest.truthy isFile(testFile)\n\tfixFile testFile, (contents) =>\n\t\tcontents.replace 'test', 'new test'\n\tutest.truthy isFile(testFile)\n\tutest.equal slurp(testFile), \"this is a new test\\n\"\n\tawait rmFile testFile\n\tutest.falsy isFile(testFile)\n\n\t# --- Create file package.json, modify, delete\n\tpkgJsonFile = mkpath(newDir, 'package.json');\n\thJson = {\n\t\tauthor: \"John Deighan\",\n\t\tlicense: \"MIT\"\n\t\t}\n\tbarfJSON hJson, pkgJsonFile\n\tutest.truthy isFile(pkgJsonFile)\n\tutest.equal slurpJSON(pkgJsonFile), {\n\t\tauthor: \"John Deighan\",\n\t\tlicense: \"MIT\"\n\t\t}\n\tfixJSON pkgJsonFile, (hJson) =>\n\t\thJson.author = 'Billy Bob'\n\t\thJson.type = 'module'\n\tutest.equal slurpJSON(pkgJsonFile), {\n\t\tauthor: \"Billy Bob\",\n\t\tlicense: \"MIT\"\n\t\ttype: 'module'\n\t\t}\n\tutest.truthy isFile(pkgJsonFile)\n\tawait rmFile pkgJsonFile\n\tutest.falsy isFile(pkgJsonFile)\n\n\n\t# --- Delete subdirectory 'new-tests'\n\trmDir newDir\n\tutest.falsy isDir(newDir)\n\t)()\n\n# ----------------------------------------------------------------------------\n# --- Test forEachFile:\n\n(() ->\n\tsubdir = mkpath(testDir, 'subdirectory')\n\n\thFileTypes = {}\n\tnTextFiles = 0\n\n\tcallback = (filename, dir, level) =>\n\t\tnTextFiles += 1\n\t\treturn\n\n\tfilter = (filename, dir, level) =>\n\t\text = fileExt(filename)\n\t\tif hFileTypes.hasOwnProperty(ext)\n\t\t\thFileTypes[ext] += 1\n\t\telse\n\t\t\thFileTypes[ext] = 1\n\t\treturn (ext == '.txt')\n\n\tforEachFile subdir, callback, filter\n\n\tutest.equal nTextFiles, 2\n\tutest.equal hFileTypes, {\n\t\t'.txt': 2\n\t\t'.doc': 1\n\t\t'.md': 1\n\t\t}\n\t)()\n"
  ]
}