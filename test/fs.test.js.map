{
  "version": 3,
  "file": "fs.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\fs.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# fs.test.coffee\n\nimport {dirname, resolve} from 'path'\nimport {fileURLToPath} from 'url'\n\nimport {undef} from '@jdeighan/base-utils'\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\nimport {LOG} from '@jdeighan/base-utils/log'\nimport {dbg, dbgEnter, dbgReturn} from '@jdeighan/base-utils/debug'\nimport {equal, like, truthy, falsy} from '@jdeighan/base-utils/utest'\nimport {parentDir} from '@jdeighan/base-utils/fs'\nimport {\n\t# --- Re-exports, originally from @jdeighan/base-utils/fs\n\tmydir, mkpath, isFile, isDir, mkDir, rmDir, rmFile,\n\tforEachLineInFile, barf, barfJSON, slurp, slurpJSON,\n\n\tmyfile, myfullpath, isSimpleFileName,\n\tgetSubDirs, pathTo, getFullPath, parsePath, fileStub, fileExt,\n\twithExt, projRoot, forEachFile,\n\tforEachBlock, forEachSetOfBlocks,\n\tfixFile, fixJSON,\n\tcloneRepo, homeDir,\n\t} from '@jdeighan/coffee-utils/fs'\n\nprojDir = projRoot(import.meta.url)\nmy_dir = mydir(import.meta.url)\nassert isDir(my_dir)\n\nmy_fname = 'fs.test.js'\nmy_path = mkpath(my_dir, my_fname)\n\ntestDir = mydir(`import.meta.url`)\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tequal my_dir, mkpath(projDir, 'test')\n\tequal myfile(import.meta.url), 'fs.test.js'\n\tequal myfullpath(import.meta.url),  mkpath(projDir, 'test', 'fs.test.js')\n\n\tequal withExt('file.py', 'svelte'), 'file.svelte'\n\tequal withExt('file.py', '.svelte'), 'file.svelte'\n\n\tequal withExt('/bin/file.py', 'svelte'), '/bin/file.svelte'\n\tequal withExt('/bin/file.py', '.svelte'), '/bin/file.svelte'\n\t)()\n\n# ---------------------------------------------------------------------------\n\n(() ->\n\tfname = 'block.test.coffee'\n\n\ttruthy isFile(\"#{my_dir}/#{fname}\")\n\tfalsy  isFile(\"#{my_dir}/nosuchfile.test.coffee\")\n\n\tequal  pathTo(\"#{fname}\", my_dir), mkpath(my_dir, fname)\n\tequal  pathTo('myfile.txt', my_dir), mkpath(my_dir, 'myfile.txt')\n\tequal  pathTo('test.txt', my_dir), mkpath(my_dir, 'subdirectory', 'test.txt')\n\tequal  pathTo('myfile2.txt', my_dir), mkpath(my_dir, 'subdirectory', 'subdir', 'myfile2.txt')\n\n\thOpt = {relative: true}\n\tequal  pathTo(\"#{fname}\", my_dir, hOpt), \"./#{fname}\"\n\tequal  pathTo('myfile.txt', my_dir, hOpt), \"./myfile.txt\"\n\tequal  pathTo('test.txt', my_dir, hOpt), \"./subdirectory/test.txt\"\n\tequal  pathTo('myfile2.txt', my_dir, hOpt), \"./subdirectory/subdir/myfile2.txt\"\n\n\thOpt2 = {relative: true, direction: 'up'}\n\tequal  pathTo('package.json', my_dir, hOpt2), \"../package.json\"\n\tequal  pathTo('.bashrc', my_dir, hOpt2), \"../../.bashrc\"\n\t)()\n\n# ---------------------------------------------------------------------------\n\n# --- dirs are returned in alphabetical order\nlike getSubDirs(my_dir), ['data','markdown','new-tests','subdirectory']\n\nequal pathTo('test.txt', my_dir), \\\n\t\t\"#{my_dir}/subdirectory/test.txt\"\n\n# ---------------------------------------------------------------------------\n\nequal mkpath('/usr/lib', 'johnd'), 'c:/usr/lib/johnd'\nequal mkpath('', '/usr/lib', 'johnd'), 'c:/usr/lib/johnd'\nequal mkpath(\"c:/\", 'local/user'), 'c:/local/user'\nequal mkpath('/usr', 'lib', 'local', 'johnd'),\n\t\t'c:/usr/lib/local/johnd'\n\nequal mkpath('\\\\usr\\\\lib', 'johnd'), 'c:/usr/lib/johnd'\nequal mkpath(\"c:\\\\\", 'local\\\\user'), 'c:/local/user'\nequal mkpath('\\\\usr', 'lib', 'local', 'johnd'),\n\t\t'c:/usr/lib/local/johnd'\n\nequal mkpath('C:\\\\Users\\\\johnd', 'cielo'), 'c:/Users/johnd/cielo'\n\n# ---------------------------------------------------------------------------\n# test getFullPath()\n\n# --- current working directory is the root dir, i.e. parent of this directory\nwd = mkpath(process.cwd())\n\nrootdir = mkpath(resolve(my_dir, '..'))\nassert rootdir == wd, \"#{rootdir} should equal #{wd}\"\n\ndbg \"Current Working Directory = '#{wd}'\"\ndbg \"my_dir = '#{my_dir}'\"\ndbg \"my_fname = '#{my_fname}'\"\ndbg \"my_path = '#{my_path}'\"\ndbg \"rootdir = '#{rootdir}'\"\n\n# --- given a full path, only change \\ to /\nequal getFullPath(my_path), my_path\n\n# --- given a utest file name, prepend the current working directory\nequal getFullPath(my_fname), mkpath(rootdir, my_fname)\n\n# --- leading . should be resolved\nequal getFullPath(\"./#{my_fname}\"), mkpath(rootdir, my_fname)\n\n# --- leading .. should be resolved\nequal getFullPath(\"./test/../#{my_fname}\"), mkpath(rootdir, my_fname)\n\nhSourceInfo = parsePath(import.meta.url)\nlike hSourceInfo, {\n\tdir: my_dir\n\tfileName: my_fname\n\tfilePath: my_path\n\tstub: fileStub(my_fname)\n\text: fileExt(my_fname)\n\t}\n\nhSourceInfo2 = parsePath(my_path)    # should be the same\nlike hSourceInfo2, {\n\tdir: my_dir\n\tfileName: my_fname\n\tfilePath: my_path\n\tstub: fileStub(my_fname)\n\text: fileExt(my_fname)\n\t}\n\nhSourceInfo3 = parsePath(my_dir)     # should know that it's a directory\nlike hSourceInfo3, {\n\tdir: parentDir(my_dir)\n\troot: \"c:/\"\n\t}\n\nlike parsePath(my_path), {\n\ttype: 'file'\n\troot: 'c:/'\n\tdir: my_dir\n\tfilePath: my_path\n\tpath: my_path\n\tfileName: my_fname\n\tbase: my_fname\n\tstub: fileStub(my_fname)\n\tname: fileStub(my_fname)\n\tpurpose: 'test'\n\text: '.js'\n\t}\n\nif process.platform == 'win32'\n\ttruthy isDir('c:/Users')\n\ttruthy isDir('c:/Program Files')\n\tfalsy  isFile('c:/Users')\n\tfalsy  isFile('c:/Program Files')\n\n\tfalsy  isDir('c:/Windows/notepad.exe')\n\tfalsy  isDir(\n\t\t'c:/Program Files/Windows Media Player/wmplayer.exe'\n\t\t)\n\ttruthy isFile('c:/Windows/notepad.exe')\n\ttruthy isFile(\n\t\t'c:/Program Files/Windows Media Player/wmplayer.exe'\n\t\t)\n\n\ttruthy isSimpleFileName('notepad.exe')\n\tfalsy  isSimpleFileName(\n\t\t'c:/Program Files/Windows Media Player/wmplayer.exe'\n\t\t)\n\nequal fileExt('file.txt'), '.txt'\nequal fileExt('file.'), ''\nequal fileExt('file.99'), '.99'\nequal fileExt('file._txt'), '._txt'\n\nfilepath = pathTo('readline.txt', my_dir)\nequal filepath, \"c:/Users/johnd/coffee-utils/test/readline.txt\"\n\n# ---------------------------------------------------------------------------\n# --- test forEachLineInFile()\n#     Contents of file2.txt:\n#     # --- this is a comment\n#     abc\n#     def\n#     ghi\n#     jkl\n\n\n(() ->\n\tlLines = []\n\n\tcallback = (line) =>\n\t\tif ! line.match(/^\\s*\\#(\\s|$)/)\n\t\t\tlLines.push line\n\t\treturn false\n\n\tfilepath = \"c:/Users/johnd/coffee-utils/test/data/file2.txt\"\n\tforEachLineInFile filepath, callback\n\n\tequal lLines, [\n\t\t\"abc\",\n\t\t\"def\",\n\t\t\"ghi\",\n\t\t\"jkl\",\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n# test forEachBlock()\n\n(() ->\n\tlBlocks = []\n\n\tcallback = (block) ->\n\t\tlBlocks.push block\n\t\treturn false\n\n\tfilepath = \"c:/Users/johnd/coffee-utils/test/data/file3.txt\"\n\tforEachBlock filepath, callback\n\n\tequal lBlocks, [\n\t\t\"abc\\ndef\",\n\t\t\"abc\\ndef\\nghi\",\n\t\t\"abc\\ndef\\nghi\\njkl\",\n\t\t]\n\t)()\n\n# ----------------------------------------------------------------------------\n\n(() ->\n\tfilepath = mkpath(testDir, 'code2.test.txt')\n\tlFirstBlocks = undef\n\tcallback = (lBlocks) ->\n\t\tlFirstBlocks = lBlocks\n\t\treturn true   # we're only interested in the first set\n\n\tforEachSetOfBlocks filepath, callback\n\tequal lFirstBlocks, [\"f()\", \"f\"]\n\t)()\n\n# ----------------------------------------------------------------------------\n\n(() ->\n\tfilepath = mkpath(testDir, 'code2.test.txt')\n\tlAllBlockSets = []\n\tcallback = (lBlocks) ->\n\t\tlAllBlockSets.push(lBlocks)\n\t\treturn\n\n\tforEachSetOfBlocks filepath, callback\n\tequal lAllBlockSets, [\n\t\t\t[\"f()\", \"f\"],\n\t\t\t[\"f = (key=undef) ->\\n\\tswitch key\\n\\t\\twhen 'ok'\\n\\t\\t\\tsay 'all is OK'\", \"f,say,mkpath\"],\n\t\t\t]\n\t)()\n\n# ----------------------------------------------------------------------------\n# --- Test new functions:\n#\tmkDir, rmDir, rmFile, fixFile, fixJSON,\n#\tcloneRepo, homeDir,\n\n(() ->\n\thome = homeDir()\n\tif (home == 'c:/Users/johnd')\n\t\tequal my_dir, 'c:/Users/johnd/coffee-utils/test'\n\n\t# --- Create new directories and files\n\n\t# --- Create 'xxx.txt' in this test folder, modify, delete\n\txFile = mkpath(my_dir, 'xxx.txt')\n\tbarf \"\"\"\n\t\txxx\n\t\tyyy\n\t\t\"\"\", my_dir, 'xxx.txt'\n\ttruthy isFile(xFile)\n\n\t# --- fixFile() is async\n\tawait fixFile xFile, (contents) =>\n\t\tnewContents = contents.replace('yyy', 'zzz')\n\t\treturn newContents\n\n\ttruthy isFile(xFile)\n\tequal slurp(xFile), \"xxx\\nzzz\\n\"\n\tawait rmFile xFile\n\tfalsy isFile(xFile)\n\n\t# --- Create new subdirectory 'new-tests'\n\tnewDir = mkpath(my_dir, 'new-tests')\n\tmkDir newDir\n\ttruthy isDir(newDir)\n\n\t# --- Create file test.txt, modify, delete\n\ttestFile = mkpath(newDir, 'test.txt')\n\tbarf \"this is a test\\n\", xFile\n\ttruthy isFile(testFile)\n\tfixFile testFile, (contents) =>\n\t\tcontents.replace 'test', 'new test'\n\ttruthy isFile(testFile)\n\tequal slurp(testFile), \"this is a new test\\n\"\n\tawait rmFile testFile\n\tfalsy isFile(testFile)\n\n\t# --- Create file package.json, modify, delete\n\tpkgJsonFile = mkpath(newDir, 'package.json');\n\thJson = {\n\t\tauthor: \"John Deighan\",\n\t\tlicense: \"MIT\"\n\t\t}\n\tbarfJSON hJson, pkgJsonFile\n\ttruthy isFile(pkgJsonFile)\n\tequal slurpJSON(pkgJsonFile), {\n\t\tauthor: \"John Deighan\",\n\t\tlicense: \"MIT\"\n\t\t}\n\tfixJSON pkgJsonFile, (hJson) =>\n\t\thJson.author = 'Billy Bob'\n\t\thJson.type = 'module'\n\tequal slurpJSON(pkgJsonFile), {\n\t\tauthor: \"Billy Bob\",\n\t\tlicense: \"MIT\"\n\t\ttype: 'module'\n\t\t}\n\ttruthy isFile(pkgJsonFile)\n\tawait rmFile pkgJsonFile\n\tfalsy isFile(pkgJsonFile)\n\n\n\t# --- Delete subdirectory 'new-tests'\n\trmDir newDir\n\tfalsy isDir(newDir)\n\t)()\n\n# ----------------------------------------------------------------------------\n# --- Test forEachFile:\n\n(() ->\n\tsubdir = mkpath(testDir, 'subdirectory')\n\n\thFileTypes = {}\n\tnTextFiles = 0\n\n\tcallback = (filename, dir, level) =>\n\t\tnTextFiles += 1\n\t\treturn\n\n\tfilter = (filename, dir, level) =>\n\t\text = fileExt(filename)\n\t\tif hFileTypes.hasOwnProperty(ext)\n\t\t\thFileTypes[ext] += 1\n\t\telse\n\t\t\thFileTypes[ext] = 1\n\t\treturn (ext == '.txt')\n\n\tforEachFile subdir, callback, filter\n\n\tequal nTextFiles, 2\n\tequal hFileTypes, {\n\t\t'.txt': 2\n\t\t'.doc': 1\n\t\t'.md': 1\n\t\t}\n\t)()\n"
  ]
}