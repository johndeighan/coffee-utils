# tester.test.cielo

import {pass} from '@jdeighan/coffee-utils'
import {UnitTester} from '@jdeighan/coffee-utils/test'

tester = new UnitTester

tester.equal     {{LINE}}, 'abc', 'abc'
tester.equal     {{LINE}}, ['a','b'], [  'a',   'b',  ]
tester.truthy    {{LINE}}, 42
tester.falsy     {{LINE}}, null
tester.notequal  {{LINE}}, 'abc', 'def'
tester.fails     {{LINE}}, () -> throw new Error("bad")
tester.different {{LINE}}, ['a'], ['a']

lItems = ['a', 'b', 'c']
tester.same {{LINE}}, lItems, lItems

# --- Duplicate line # should not be an error
tester.notequal {{LINE}}, 'xxx', 'xxxx'

# ---------------------------------------------------------------------------
# --- Test creating custom tester

class CapTester extends UnitTester

	transformValue: (input) ->
		return input.toUpperCase()

capTester = new CapTester()

capTester.equal {{LINE}}, 'abc', 'ABC'
capTester.equal {{LINE}}, 'ABC', 'ABC'
capTester.notequal {{LINE}}, 'abc', 'abc'

# ---------------------------------------------------------------------------
# --- Test string normalization

tester.equal {{LINE}}, """
		line 1

		line     2

		line 3
		""", """
		line 1
		line 2
		line 3
		"""

# ---------------------------------------------------------------------------
# --- Test same_list

tester.same_list {{LINE}}, [1,2,3], [1,2,3]
tester.same_list {{LINE}}, [2,1,3], [1,2,3]
tester.same_list {{LINE}}, ['a','b','c'], ['a','b','c']
tester.same_list {{LINE}}, ['b','a','c'], ['a','b','c']

# ---------------------------------------------------------------------------
# --- Test not_same_list

tester.not_same_list {{LINE}}, [1,2,3], [1,2]
tester.not_same_list {{LINE}}, [2,1,3], [1,2]
tester.not_same_list {{LINE}}, ['a','b','c'], ['a','b']
tester.not_same_list {{LINE}}, ['b','a','c'], ['a','b']

# ---------------------------------------------------------------------------
# Test if negative line numbers generate error if env var FINALTEST is set

process.env.FINALTEST = 'yes'

tester.fails {{LINE}}, () ->
	tester.equal -99, 2, 2

delete process.env.FINALTEST
